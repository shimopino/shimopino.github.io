<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>shimopino&#x27;s blog</title>
      <link>https://shimopino.github.io</link>
      <description>興味の赴くままに実験していく</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://shimopino.github.io/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Tue, 15 Aug 2023 00:00:00 +0000</lastBuildDate>
      <item>
          <title>proc-macro-workshop を通して Rust の手続き的マクロを理解する</title>
          <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://shimopino.github.io/blog/proc-macro-workshop-builder/</link>
          <guid>https://shimopino.github.io/blog/proc-macro-workshop-builder/</guid>
          <description xml:base="https://shimopino.github.io/blog/proc-macro-workshop-builder/">&lt;h2 id=&quot;hazimeni&quot;&gt;はじめに&lt;&#x2F;h2&gt;
&lt;p&gt;Rust でプログラミングをしていると、 &lt;code&gt;vec!&lt;&#x2F;code&gt; や &lt;code&gt;println!&lt;&#x2F;code&gt; のような、 &lt;code&gt;!&lt;&#x2F;code&gt; で終わる特別な関数を目にすることがあります。これらは、Rust の「マクロ」と呼ばれる機能です。&lt;&#x2F;p&gt;
&lt;p&gt;マクロは、簡単に言うと「コードを生成するコード」であり、繰り返しや特定のパターンのコードを簡単に、効率的に記述することができます。この記事では以下のような 手続き的マクロ と呼ばれる機能を深掘りしていきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;[#derive(Debug)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Derive macros
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rust-nomakuronituite&quot;&gt;Rust のマクロについて&lt;&#x2F;h2&gt;
&lt;p&gt;Rust のマクロには、宣言的マクロと手続き的マクロの 2 つの種類が存在します。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;宣言的マクロ: &lt;code&gt;macro_rules!&lt;&#x2F;code&gt; 構文で定義され、 &lt;code&gt;vec!&lt;&#x2F;code&gt; や &lt;code&gt;println!&lt;&#x2F;code&gt; が該当します&lt;&#x2F;li&gt;
&lt;li&gt;手続き的マクロ: このマクロは以下の 3 つの種類が存在します
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;procedural-macros.html#derive-macros&quot;&gt;Derive macros&lt;&#x2F;a&gt;: &lt;code&gt;#[derive]&lt;&#x2F;code&gt; を使用して構造体や enum に追加の処理を実装できる&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;procedural-macros.html#attribute-macros&quot;&gt;Attribute macros&lt;&#x2F;a&gt;: 構造体や enum だけではなく、関数に対しても追加の処理を実装できる&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;procedural-macros.html#function-like-procedural-macros&quot;&gt;Function-like macros&lt;&#x2F;a&gt;: 宣言的マクロと似たような呼び出し形で、より複雑な処理が記述できる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;本記事では &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;proc-macro-workshop&quot;&gt;proc-macro-workshop&lt;&#x2F;a&gt; を通じて、手続き的マクロの各種類とその記述方法について理解度を深めていきます。&lt;&#x2F;p&gt;
&lt;p&gt;本記事で実装した内容は下記リポジトリに配置しています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shimopino&#x2F;proc-macro-playground&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;shimopino&#x2F;proc-macro-playground&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;jin-mefang&quot;&gt;進め方&lt;&#x2F;h2&gt;
&lt;p&gt;まずは本記事では &lt;code&gt;#[derive]&lt;&#x2F;code&gt; マクロを使って Builder パターンの実装を進めていき、最終的には以下のような処理を実現できるようにしていきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;use derive_builder::Builder;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(each = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command = Command::builder()
&lt;&#x2F;span&gt;&lt;span&gt;        .executable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        .arg(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        .arg(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        .build()
&lt;&#x2F;span&gt;&lt;span&gt;        .unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(command.executable, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;proc-macro-workshop&#x2F;tree&#x2F;master#derive-macro-derivebuilder&quot;&gt;Derive macro: derive(Builder)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;課題を進めていく上で、以下のクレートを利用します。それぞれの細かい説明は課題を進めていく中で紹介します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;proc-macro2 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;1.0.66&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;quote &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;1.0.32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;syn &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;2.0.28&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;extra-traits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;01-parse&quot;&gt;01-parse&lt;&#x2F;h2&gt;
&lt;p&gt;まずは一番最初の課題である &lt;code&gt;01-parse&lt;&#x2F;code&gt; のテストコードでは、以下の &lt;code&gt;derive&lt;&#x2F;code&gt; マクロを利用したときにコンパイルエラーが発生しないようにしていきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;初期実装は以下のように &lt;code&gt;unimplemented!()&lt;&#x2F;code&gt; が利用されているため、まずは関数の型シグネチャに合うように実装を追加していきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;use proc_macro::TokenStream;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = input;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    unimplemented!()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;コンパイルを通すだけであれば、以下のように空の &lt;code&gt;TokenStream&lt;&#x2F;code&gt; を返却すれば OK です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;use proc_macro::TokenStream;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = input;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TokenStream::new()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;proc_macro&#x2F;struct.TokenStream.html&quot;&gt;proc_macro::TokenStream&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;TokenStream&lt;&#x2F;code&gt; はマクロを適用した先の Rust コードのトークンが含まれており、 &lt;code&gt;Command&lt;&#x2F;code&gt; 構造体の場合には以下のようなトークンが入力として渡されます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;TokenStream&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#0 bytes(39..45),
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#0 bytes(46..53),
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Group &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        delimiter: Brace,
&lt;&#x2F;span&gt;&lt;span&gt;        stream: TokenStream [
&lt;&#x2F;span&gt;&lt;span&gt;            Ident {
&lt;&#x2F;span&gt;&lt;span&gt;                ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#0 bytes(60..70),
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            Punct {
&lt;&#x2F;span&gt;&lt;span&gt;                ch: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                spacing: Alone,
&lt;&#x2F;span&gt;&lt;span&gt;                span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#0 bytes(70..71),
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            Ident {
&lt;&#x2F;span&gt;&lt;span&gt;                ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#0 bytes(72..78),
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# ... 残りの定義が続いていく
&lt;&#x2F;span&gt;&lt;span&gt;        ],
&lt;&#x2F;span&gt;&lt;span&gt;        span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#0 bytes(54..151),
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;shimopino&#x2F;e896b706c71949203d253ca7edd95b6e&quot;&gt;Command 構造体の TokenStream の全文&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;これはただのトークンのストリームでしかないため、Rust のソースコードを表現する構文木にパースして取り扱いしやすい形式に変換するための &lt;code&gt;syn&lt;&#x2F;code&gt; クレートが用意されています。&lt;&#x2F;p&gt;
&lt;p&gt;今回作成しているものは &lt;code&gt;derive&lt;&#x2F;code&gt; マクロであるため &lt;code&gt;syn::DeriveInput&lt;&#x2F;code&gt; という &lt;code&gt;struct&lt;&#x2F;code&gt; を前提とした構造としてパースすることが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; proc_macro::TokenStream -&amp;gt; proc_macro2::TokenStream への変換を含んでいる
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; proc_macro::TokenStream は Rust のコンパイラでしか取り扱えない特殊な値
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; proc_macro2::TokenStream に変換することでソースコードで取り扱える形式に変換している
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = parse_macro_input!(input as DeriveInput);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    TokenStream::new()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;実際に構文木にパースした結果は以下のようになっており、Rust コードのトークンがツリー構造として変換されており、 &lt;code&gt;TokenStream&lt;&#x2F;code&gt; よりも取り扱いしやすい形式になっていることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;DeriveInput &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    attrs: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    vis: Visibility::Inherited,
&lt;&#x2F;span&gt;&lt;span&gt;    ident: Ident {
&lt;&#x2F;span&gt;&lt;span&gt;        ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#0 bytes(46..53),
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    generics: Generics {
&lt;&#x2F;span&gt;&lt;span&gt;        lt_token: None,
&lt;&#x2F;span&gt;&lt;span&gt;        params: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        gt_token: None,
&lt;&#x2F;span&gt;&lt;span&gt;        where_clause: None,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    data: Data::Struct {
&lt;&#x2F;span&gt;&lt;span&gt;        struct_token: Struct,
&lt;&#x2F;span&gt;&lt;span&gt;        fields: Fields::Named {
&lt;&#x2F;span&gt;&lt;span&gt;            brace_token: Brace,
&lt;&#x2F;span&gt;&lt;span&gt;            named: [
&lt;&#x2F;span&gt;&lt;span&gt;                Field {
&lt;&#x2F;span&gt;&lt;span&gt;                    attrs: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    vis: Visibility::Inherited,
&lt;&#x2F;span&gt;&lt;span&gt;                    mutability: FieldMutability::None,
&lt;&#x2F;span&gt;&lt;span&gt;                    ident: Some(
&lt;&#x2F;span&gt;&lt;span&gt;                        Ident {
&lt;&#x2F;span&gt;&lt;span&gt;                            ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#0 bytes(60..70),
&lt;&#x2F;span&gt;&lt;span&gt;                        },
&lt;&#x2F;span&gt;&lt;span&gt;                    ),
&lt;&#x2F;span&gt;&lt;span&gt;                    colon_token: Some(
&lt;&#x2F;span&gt;&lt;span&gt;                        Colon,
&lt;&#x2F;span&gt;&lt;span&gt;                    ),
&lt;&#x2F;span&gt;&lt;span&gt;                    ty: Type::Path {
&lt;&#x2F;span&gt;&lt;span&gt;                        qself: None,
&lt;&#x2F;span&gt;&lt;span&gt;                        path: Path {
&lt;&#x2F;span&gt;&lt;span&gt;                            leading_colon: None,
&lt;&#x2F;span&gt;&lt;span&gt;                            segments: [
&lt;&#x2F;span&gt;&lt;span&gt;                                PathSegment {
&lt;&#x2F;span&gt;&lt;span&gt;                                    ident: Ident {
&lt;&#x2F;span&gt;&lt;span&gt;                                        ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                        span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#0 bytes(72..78),
&lt;&#x2F;span&gt;&lt;span&gt;                                    },
&lt;&#x2F;span&gt;&lt;span&gt;                                    arguments: PathArguments::None,
&lt;&#x2F;span&gt;&lt;span&gt;                                },
&lt;&#x2F;span&gt;&lt;span&gt;                            ],
&lt;&#x2F;span&gt;&lt;span&gt;                        },
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;            ],
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        semi_token: None,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでパターンマッチなどの機能を利用して細かい制御を行うことが可能になりました。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;latest&#x2F;syn&#x2F;struct.DeriveInput.html&quot;&gt;syn::DeriveInput&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;shimopino&#x2F;a5cf6c3810b3131b31ba99cc55074d5d&quot;&gt;Command 構造体の DeriveInput の全文&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;他にもどのように構文木にパースされるのかが気になる場合は &lt;a href=&quot;https:&#x2F;&#x2F;astexplorer.net&#x2F;&quot;&gt;AST Explorer&lt;&#x2F;a&gt; を実際に触って様々なパターンを見てみるとよいと思います。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;02-create-builder&quot;&gt;02-create-builder&lt;&#x2F;h2&gt;
&lt;p&gt;次の課題は Builder の &lt;code&gt;derive&lt;&#x2F;code&gt; マクロを適用した構造体に対して、 &lt;code&gt;builder&lt;&#x2F;code&gt; メソッドを実装し、Builder パターンを実装するための準備を行います。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder = Command::builder(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; メソッドを生成するだけ
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = builder;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;手続きマクロの実装に移る前に、どのようなコードを生成できればよいのかを確認します。&lt;&#x2F;p&gt;
&lt;p&gt;以下のように適用した構造体に合わせた専用の Builder 構造体と、その構造体を生成するためのメソッドを作成することを目指します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; CommandBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;        CommandBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;            executable: None,
&lt;&#x2F;span&gt;&lt;span&gt;            args: None,
&lt;&#x2F;span&gt;&lt;span&gt;            env: None,
&lt;&#x2F;span&gt;&lt;span&gt;            current_dir: None,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;まずは汎用性などは無視してコンパイルエラーが発生しないようにするために、いくつかのフィールドはハードコードでそのまま生成する形式で進めます。&lt;&#x2F;p&gt;
&lt;p&gt;手続きマクロの内部で Rust のコードを生成するときには &lt;code&gt;quote&lt;&#x2F;code&gt; クレートを利用すると簡易的に生成するコードを指定することが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = parse_macro_input!(input as DeriveInput);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; quote! 内部で生成する実装を指定します
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; このマクロの内部では、型補完は有効にならないので注意が必要です
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 結果は proc_macro2::TokenStream として返却されます
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expanded = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; CommandBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;                CommandBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;                    executable: None,
&lt;&#x2F;span&gt;&lt;span&gt;                    args: None,
&lt;&#x2F;span&gt;&lt;span&gt;                    env: None,
&lt;&#x2F;span&gt;&lt;span&gt;                    current_dir: None,
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ここで proc_macro::TokenStream に型変換します
&lt;&#x2F;span&gt;&lt;span&gt;    expanded.into()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;quote&#x2F;1.0.32&#x2F;quote&#x2F;macro.quote.html&quot;&gt;quote::quote&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;動作確認のために &lt;code&gt;cargo expand&lt;&#x2F;code&gt; を利用すれば、以下のようにマクロがどのように展開されているのかがわかり、今回ハードコードで指定した通りにソースコードが生成されていることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;(prelude_import)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;prelude_import&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;use std::prelude::rust_2021::*;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;extern crate std;
&lt;&#x2F;span&gt;&lt;span&gt;use demo::Builder;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ↓ ここからコードが展開されている
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; CommandBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;        CommandBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;            executable: None,
&lt;&#x2F;span&gt;&lt;span&gt;            args: None,
&lt;&#x2F;span&gt;&lt;span&gt;            env: None,
&lt;&#x2F;span&gt;&lt;span&gt;            current_dir: None,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder = Command::builder();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = builder;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでコンパイルエラーは発生せず、テストも PASS することができました。&lt;&#x2F;p&gt;
&lt;p&gt;しかしながら、急に出てきた &lt;code&gt;quote&lt;&#x2F;code&gt; クレートの役割や、他の構造体でも適用できるようにするための汎用化の処理が不足しています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quote-kureto&quot;&gt;&lt;code&gt;quote&lt;&#x2F;code&gt; クレート&lt;&#x2F;h3&gt;
&lt;p&gt;最初の例で見たように、 入力となる &lt;code&gt;TokenStream&lt;&#x2F;code&gt; を実際に &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;shimopino&#x2F;e896b706c71949203d253ca7edd95b6e&quot;&gt;ログに出力してみた結果&lt;&#x2F;a&gt; を確認すると、Rust のコードを表すトークンの配列となっていたことがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;TokenStream&lt;&#x2F;span&gt;&lt;span&gt; [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#5 bytes(29..36),
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        span: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#5 bytes(29..36),
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これは構文木を構成するトークンである &lt;code&gt;proc_macro::TokenTree&lt;&#x2F;code&gt; から構成されています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;TokenTree &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Group(Group),
&lt;&#x2F;span&gt;&lt;span&gt;    Ident(Ident),
&lt;&#x2F;span&gt;&lt;span&gt;    Punct(Punct),
&lt;&#x2F;span&gt;&lt;span&gt;    Literal(Literal),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;proc_macro&#x2F;enum.TokenTree.html&quot;&gt;proc_macro::TokenTree&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;例えば以下のような単純な &lt;code&gt;CommandBuilder&lt;&#x2F;code&gt; 構造体を例に考えます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この構造体は &lt;code&gt;TokenTree&lt;&#x2F;code&gt; の各種トークンに対して以下のようにマッピングされます。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;proc-macro-workshop-builder&#x2F;assets&#x2F;token-tree.drawio.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;この構造体を例に関数から返却する &lt;code&gt;proc_macro::TokenStream&lt;&#x2F;code&gt; を、 &lt;code&gt;proc_macro::TokenTree&lt;&#x2F;code&gt; をそのまま利用して返却値を構築しようとすると以下のように定義する必要があります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;use proc_macro::{Group, Ident, Punct, Spacing, Span, TokenStream, TokenTree};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; IteratorTokenStream に変換するために配列で指定します
&lt;&#x2F;span&gt;&lt;span&gt;    [
&lt;&#x2F;span&gt;&lt;span&gt;        TokenTree::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Span::call_site())),
&lt;&#x2F;span&gt;&lt;span&gt;        TokenTree::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;CommandBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Span::call_site())),
&lt;&#x2F;span&gt;&lt;span&gt;        TokenTree::Group(Group::new(
&lt;&#x2F;span&gt;&lt;span&gt;            proc_macro::Delimiter::Brace,
&lt;&#x2F;span&gt;&lt;span&gt;            [
&lt;&#x2F;span&gt;&lt;span&gt;                TokenTree::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Span::call_site())),
&lt;&#x2F;span&gt;&lt;span&gt;                TokenTree::Punct(Punct::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, Spacing::Alone)),
&lt;&#x2F;span&gt;&lt;span&gt;                TokenTree::Ident(Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Span::call_site())),
&lt;&#x2F;span&gt;&lt;span&gt;                TokenTree::Punct(Punct::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, Spacing::Alone)),
&lt;&#x2F;span&gt;&lt;span&gt;            ]
&lt;&#x2F;span&gt;&lt;span&gt;            .into_iter()
&lt;&#x2F;span&gt;&lt;span&gt;            .collect::&amp;lt;TokenStream&amp;gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        )),
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;    .into_iter()
&lt;&#x2F;span&gt;&lt;span&gt;    .collect()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで &lt;code&gt;cargo expand&lt;&#x2F;code&gt; を実行すれば、以下のように設定したトークンに従って、Rust コードが生成されていることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;実は &lt;code&gt;quote!&lt;&#x2F;code&gt; はこれと似たようなことをより簡単に実行できるように用意されているマクロであり、実際に Rust のコードを記述すれば、それを &lt;code&gt;TokenStream&lt;&#x2F;code&gt; の形式に変換してくれます。&lt;&#x2F;p&gt;
&lt;p&gt;先ほどと同じことを &lt;code&gt;quote!&lt;&#x2F;code&gt; で実現したい場合には、以下のように生成したい Rust コードをそのまま記述するだけで構いません。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; TokenTree を直接利用するよりも、はるかに簡易的に記述することができます
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expanded = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; quote! が生成するのはライブラリ用に用意された proc_macto2::TokenStream なのでここで変換しています
&lt;&#x2F;span&gt;&lt;span&gt;    expanded.into()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これが &lt;code&gt;quote&lt;&#x2F;code&gt; クレートが提供している機能です。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;builder-gou-zao-ti-noming-qian-noqu-de&quot;&gt;Builder 構造体の名前の取得&lt;&#x2F;h3&gt;
&lt;p&gt;今回の実装は &lt;code&gt;Command&lt;&#x2F;code&gt; 構造体に特化した実装になっていましたが、他の構造体やフィールドでも利用できるように汎用化させる必要があります。&lt;&#x2F;p&gt;
&lt;p&gt;具体的には Builder パターンの実装に関しては、以下のような構造体の名前とフィールドの定義のパターンが存在していることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 生成する構造体の名前のパターン　-&amp;gt; [元の構造体の名前]Builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; フィールドの型の定義のパターン -&amp;gt; [フィールド名]: Option&amp;lt;元の型&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;つまり &lt;code&gt;syn&lt;&#x2F;code&gt; クレートを使用して &lt;code&gt;DeriveInput&lt;&#x2F;code&gt; にパースした後で、元の構造体の名前・構造体で定義されている各フィールドの名前と型さえ取得することができれば、汎用的な実装することが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;今回は以下のように出力された &lt;code&gt;DeriveInput&lt;&#x2F;code&gt; の内容を確認しながら、必要な情報がどこに格納されているのかを確認します。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;proc-macro-workshop-builder&#x2F;assets&#x2F;derive-input.drawio.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;shimopino&#x2F;a5cf6c3810b3131b31ba99cc55074d5d&quot;&gt;全体像&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;まずは構造体の名前を抽出し &lt;code&gt;[構造体の名前]Builder&lt;&#x2F;code&gt; という名前の Builder 用の構造体を作成していきます。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;quote!&lt;&#x2F;code&gt; 内部では識別子を単純に結合することはできないので、新しく &lt;code&gt;Ident&lt;&#x2F;code&gt; を作成して変数として利用する必要があり、以下のように 2 つのやり方が存在しています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 方法① quote::format_ident! を利用する方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; original_ident = parsed.ident;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_ident = format_ident!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;{}Builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ident);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 方法② syn::Ident::new で直接生成する方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; original_ident = parsed.ident;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_name = format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ident);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_ident = syn::Ident::new(&amp;amp;builder_name, ident.span());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; どちらの場合でも quote! 内で利用できます
&lt;&#x2F;span&gt;&lt;span&gt;quote! {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;original_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; #builder_ident {
&lt;&#x2F;span&gt;&lt;span&gt;            #builder_ident {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでどのような構造体に対しても、対応する Builder 構造体の名前を定義することができました。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;quote&#x2F;1.0.32&#x2F;quote&#x2F;macro.quote.html#constructing-identifiers&quot;&gt;constructing identifiers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;builder-gou-zao-ti-nohuirudonoqu-de&quot;&gt;Builder 構造体のフィールドの取得&lt;&#x2F;h3&gt;
&lt;p&gt;これまで &lt;code&gt;quote!&lt;&#x2F;code&gt; を使って &lt;code&gt;TokenStream&lt;&#x2F;code&gt; を定義する際には個別に変数を指定したり、フィールドを指定していましたが、このマクロはイテレータを展開してトークンツリーを組み立てることも可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Iterator の検証のために動的にフィールドを作成するための元データを用意する
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vars = vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 内部で quote! を使用して TokenStream の Iterator を用意する
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; delarations: Vec&amp;lt;proc_macro2::TokenStream&amp;gt; = vars
&lt;&#x2F;span&gt;&lt;span&gt;        .into_iter()
&lt;&#x2F;span&gt;&lt;span&gt;        .map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;var_name&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = format_ident!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, var_name);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; TokenStream を生成
&lt;&#x2F;span&gt;&lt;span&gt;            quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                #ident: String,
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .collect();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expanded = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Sample &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 以下のようにマクロ内で変数を展開するように指定することが可能です
&lt;&#x2F;span&gt;&lt;span&gt;            #(#delarations)*
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    expanded.into()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで作成した内容を &lt;code&gt;cargo expand&lt;&#x2F;code&gt; で確認すると、イテレータとして用意した変数を展開して全てのフィールドの定義を動的に展開できていることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Sample &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;イテレータを展開する時に方法は、 quote クレートで実行しているテストを参考にするとイメージがつきやすいと思います。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;quote&#x2F;blob&#x2F;d8cb63f7d7f45c503ac580bd8f3cb2d8bb28b160&#x2F;tests&#x2F;test.rs#L79-L87&quot;&gt;quote! での Iterator 展開のテスト&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;CommandBuilder&lt;&#x2F;code&gt; の定義と &lt;code&gt;builder&lt;&#x2F;code&gt; メソッドの実装を作成する上で、同じように各フィールドや初期値を作成するためのイテレータを用意することを目指します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed: DeriveInput = parse_macro_input!(input as DeriveInput);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; original_ident = parsed.ident;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_ident = format_ident!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;{}Builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, original_ident);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 元が構造体であることと、タプルやUnit型を想定していないため、let else で対象データを抽出する
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;syn::Data::Struct(syn::DataStruct { fields: syn::Fields::Named(syn::FieldsNamed { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; named, .. }), .. }) = parsed.data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        panic!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;This macro can only be applied to struct using named field only, not tuple or unit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 構造体を構成する各フィールドの定義には Field からアクセスすることが可能
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Builder の定義と builder メソッドのそれぞれで必要なトークンの形に抽出する
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_fields = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;        quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            #ident: Option&amp;lt;#ty&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Builder の初期化
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_init = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;        quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            #ident: None
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expanded = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            #(#builder_fields,)*
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;original_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; #builder_ident {
&lt;&#x2F;span&gt;&lt;span&gt;                #builder_ident {
&lt;&#x2F;span&gt;&lt;span&gt;                    #(#builder_init,)*
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    expanded.into()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これを展開すれば、以下のように &lt;code&gt;TokenStream&lt;&#x2F;code&gt; のイテレーターが展開されてそれぞれの定義が作成されていることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; CommandBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;        CommandBuilder {
&lt;&#x2F;span&gt;&lt;span&gt;            executable: None,
&lt;&#x2F;span&gt;&lt;span&gt;            args: None,
&lt;&#x2F;span&gt;&lt;span&gt;            env: None,
&lt;&#x2F;span&gt;&lt;span&gt;            current_dir: None,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで他の構造体に対しても適用することが可能な汎用的なマクロにすることができました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;03-call-setters&quot;&gt;03-call-setters&lt;&#x2F;h2&gt;
&lt;p&gt;次の課題では、以下のように &lt;code&gt;Command&lt;&#x2F;code&gt; で定義されている各フィールドに対して値を設定するための &lt;code&gt;setter&lt;&#x2F;code&gt; を準備します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; builder = Command::builder();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; フィールドと同じ名称で同じ型を引数に受け取るメソッドを用意する
&lt;&#x2F;span&gt;&lt;span&gt;    builder.executable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned());
&lt;&#x2F;span&gt;&lt;span&gt;    builder.args(vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned()]);
&lt;&#x2F;span&gt;&lt;span&gt;    builder.env(vec![]);
&lt;&#x2F;span&gt;&lt;span&gt;    builder.current_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これは構造としては以下のパターンに従うメソッドを作成することと同義です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;[フィールド名](&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, [フィールド名]: [フィールドの型]) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.[フィールド名] = Some([フィールド名])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;必要な情報は各フィールドの名前と型しかないので、前回の課題で汎用化を行なった際の実装の大部分を流用するだけで実現することができます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_setters = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;    quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;#ident(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, #ident: #ty) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident = Some(#ident);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expanded = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        #(#builder_fields,)*
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 各種 setter を追加する
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        #(#builder_setters)*
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで &lt;code&gt;cargo expand&lt;&#x2F;code&gt; で展開すれば、以下のように指定した通りに各種メソッドが生成されていることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.executable = Some(executable);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.args = Some(args);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.env = Some(env);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.current_dir = Some(current_dir);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;04-call-build&quot;&gt;04-call-build&lt;&#x2F;h2&gt;
&lt;p&gt;次の課題では以下のように &lt;code&gt;build&lt;&#x2F;code&gt; メソッドを作成し、全てのフィールドに値が設定されている場合には &lt;code&gt;Ok(Command)&lt;&#x2F;code&gt; を返却し、設定されていないフィールドがあれば &lt;code&gt;Err&lt;&#x2F;code&gt; を返却するようにします。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; builder = Command::builder();
&lt;&#x2F;span&gt;&lt;span&gt;    builder.executable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned());
&lt;&#x2F;span&gt;&lt;span&gt;    builder.args(vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned()]);
&lt;&#x2F;span&gt;&lt;span&gt;    builder.env(vec![]);
&lt;&#x2F;span&gt;&lt;span&gt;    builder.current_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; build() メソッドから Result を返却する
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 設定されていないフィールドがある場合には Err を返却する
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command = builder.build().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(command.executable, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;課題メモに従い &lt;code&gt;Command&lt;&#x2F;code&gt; のフィールドの場合には、以下のように実装すれば良さそうです。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Command, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(Command {
&lt;&#x2F;span&gt;&lt;span&gt;            executable: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.executable.take().ok_or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;executable is not set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)?,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ただしこれはあくまで一例であり、以下のような実装パターンもあると思います。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt; で参照として受け取り、データを &lt;code&gt;take&lt;&#x2F;code&gt; する
&lt;ul&gt;
&lt;li&gt;データを &lt;code&gt;Command&lt;&#x2F;code&gt; に移動させながら、ビルダー自体は再利用することができる&lt;&#x2F;li&gt;
&lt;li&gt;ビルダー側の値は &lt;code&gt;None&lt;&#x2F;code&gt; にリセットされるため、注意して利用する必要がある&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; で参照として受け取り、データを &lt;code&gt;clone&lt;&#x2F;code&gt; する
&lt;ul&gt;
&lt;li&gt;ビルダーの値は変更されないのでそのまま再利用できる&lt;&#x2F;li&gt;
&lt;li&gt;データのコピーが必要であり、パフォーマンスに影響を与える可能性がある&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;今回は Builder の再利用などは考えないのでパターン 1 で実装します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; build_fields = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;    quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        #ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident.take().ok_or(format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt; is not set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, stringify!(#ident)))?
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expanded = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;#original_ident, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(#original_ident {
&lt;&#x2F;span&gt;&lt;span&gt;                #(#build_fields,)*
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでコンパイルエラーが発生することなくメソッドを追加できました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;05-method-chaining&quot;&gt;05-method-chaining&lt;&#x2F;h2&gt;
&lt;p&gt;次の課題では、メソッドチェーン形式で Builder を利用することを目指しますが、各種 &lt;code&gt;setter&lt;&#x2F;code&gt; からの返却値を &lt;code&gt;&amp;amp;mut Self&lt;&#x2F;code&gt; として定義しているため、すでにこれまでの課題が完了していれば問題なくコンパイル可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command = Command::builder()
&lt;&#x2F;span&gt;&lt;span&gt;        .executable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        .args(vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned()])
&lt;&#x2F;span&gt;&lt;span&gt;        .env(vec![])
&lt;&#x2F;span&gt;&lt;span&gt;        .current_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        .build()
&lt;&#x2F;span&gt;&lt;span&gt;        .unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(command.executable, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;06-optional-field&quot;&gt;06-optional-field&lt;&#x2F;h2&gt;
&lt;p&gt;次の課題では、構造体に &lt;code&gt;Option&lt;&#x2F;code&gt; なフィールドが含まれる場合を想定しており、対象のフィールドに対しては &lt;code&gt;setter&lt;&#x2F;code&gt; の呼び出しは必須ではなく、呼び出されていない場合には初期値として &lt;code&gt;None&lt;&#x2F;code&gt; をそのまま代入します。&lt;&#x2F;p&gt;
&lt;p&gt;これを実現するには、構造体のフィールドの型が &lt;code&gt;Option&lt;&#x2F;code&gt; であることを確認する必要があるため、これまでよりも複雑な処理が必要になります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Optionを含むフィールド定義
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command = Command::builder()
&lt;&#x2F;span&gt;&lt;span&gt;        .executable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        .args(vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned()])
&lt;&#x2F;span&gt;&lt;span&gt;        .env(vec![])
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; current_dir は設定しない場合には None が設定される
&lt;&#x2F;span&gt;&lt;span&gt;        .build()
&lt;&#x2F;span&gt;&lt;span&gt;        .unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(command.current_dir.is_none());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command = Command::builder()
&lt;&#x2F;span&gt;&lt;span&gt;        .executable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        .args(vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned()])
&lt;&#x2F;span&gt;&lt;span&gt;        .env(vec![])
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 呼び出した場合には Some(..) が設定される
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; current_dir() は引数として String の値を受け取る
&lt;&#x2F;span&gt;&lt;span&gt;        .current_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        .build()
&lt;&#x2F;span&gt;&lt;span&gt;        .unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(command.current_dir.is_some());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;今の実装では、以下のように &lt;code&gt;Option&lt;&#x2F;code&gt; が二重に付与されてしまったり &lt;code&gt;setter&lt;&#x2F;code&gt; の引数にも &lt;code&gt;Option&lt;&#x2F;code&gt; が付与されてしまいます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Option&amp;lt;String&amp;gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Option&amp;lt;Option&amp;lt;_&amp;gt;&amp;gt; と二重に適用されてしまう
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 引数が String ではなく Option&amp;lt;String&amp;gt; になってしまう
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.current_dir = Some(current_dir);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;そこでこの課題では &lt;code&gt;derive&lt;&#x2F;code&gt; マクロが適用された構造体に対して、 &lt;code&gt;Option&lt;&#x2F;code&gt; が定義されているフィールドの特定と、ラップされている中身の型を抽出して条件分岐的に &lt;code&gt;TokenStream&lt;&#x2F;code&gt; を構築していくことを目指します。&lt;&#x2F;p&gt;
&lt;p&gt;方針としては &lt;code&gt;Field&lt;&#x2F;code&gt; 内の &lt;code&gt;syn::Type::Path&lt;&#x2F;code&gt; からトップレベルの型を抽出し、その型が &lt;code&gt;Option&lt;&#x2F;code&gt; であった場合にはさらにラップされている型も同じく &lt;code&gt;syn::Type::Path&lt;&#x2F;code&gt; として抽出していきます。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;proc-macro-workshop-builder&#x2F;assets&#x2F;derive-input-optional.drawio.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;今回は対象が &lt;code&gt;Option&lt;&#x2F;code&gt; であった場合には内部の型を取り出して &lt;code&gt;Some&lt;&#x2F;code&gt; として返却する関数を用意し、この関数を対象のフィールドが &lt;code&gt;Option&lt;&#x2F;code&gt; であるかどうかの判定でも利用します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; Returns unwrapped Type in Option as Option&amp;lt;&amp;amp;Type&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;unwrap_option&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ty&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Type) -&amp;gt; Option&amp;lt;&amp;amp;Type&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;syn::Type::Path(syn::TypePath {
&lt;&#x2F;span&gt;&lt;span&gt;        path: syn::Path { segments, .. },
&lt;&#x2F;span&gt;&lt;span&gt;        ..
&lt;&#x2F;span&gt;&lt;span&gt;    }) = ty
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; segments.len() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(syn::PathSegment {
&lt;&#x2F;span&gt;&lt;span&gt;                ident,
&lt;&#x2F;span&gt;&lt;span&gt;                arguments:
&lt;&#x2F;span&gt;&lt;span&gt;                    syn::PathArguments::AngleBracketed(syn::AngleBracketedGenericArguments {
&lt;&#x2F;span&gt;&lt;span&gt;                        args, ..
&lt;&#x2F;span&gt;&lt;span&gt;                    }),
&lt;&#x2F;span&gt;&lt;span&gt;            }) = segments.first()
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ident == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; args.len() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(syn::GenericArgument::Type(inner_ty)) = args.first() {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Some(inner_ty);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    None
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;型構造を順番にアンラップしているので複雑そうに見えますが、 &lt;code&gt;Option&lt;&#x2F;code&gt; の場合には中身の型を &lt;code&gt;Option&amp;lt;&amp;amp;Type&amp;gt;&lt;&#x2F;code&gt; で返却しているだけであり、最初の &lt;code&gt;DeriveInput&lt;&#x2F;code&gt; の全体像から自然と割り出される処理なのでやっていること自体は割とシンプルです。&lt;&#x2F;p&gt;
&lt;p&gt;後はこの関数を利用して各種 Builder の型定義やメソッドのシグネチャを変更していきます。&lt;&#x2F;p&gt;
&lt;p&gt;まずは Builder の型定義を変更し、対象のフィールドが &lt;code&gt;Option&lt;&#x2F;code&gt; の場合は追加の &lt;code&gt;Option&lt;&#x2F;code&gt; でラップすることなく、元々の型をそのまま利用します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_fields = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;unwrap_option(ty).is_some() {
&lt;&#x2F;span&gt;&lt;span&gt;        quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            #ident: #ty
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            #ident: Option&amp;lt;#ty&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで以下のように元々の構造体のフィールドが &lt;code&gt;Option&lt;&#x2F;code&gt; の場合にはそのまま型を利用するようになったことがわかります&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;CommandBuilder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 二重に Option でラップしていない
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同じように各メソッドや、Command の生成部分も条件分岐をさせていきます。&lt;&#x2F;p&gt;
&lt;p&gt;以下は Command を生成する時に代入先のフィールドが &lt;code&gt;Option&lt;&#x2F;code&gt; かどうかによって内部の値をアンラップするかどうかを分岐させています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; build_fields = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;unwrap_option(ty).is_some() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 代入先も Option なので ? でアンラップする必要がない
&lt;&#x2F;span&gt;&lt;span&gt;        quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            #ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident.take()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            #ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident.take().ok_or(format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt; is not set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, stringify!(#ident)))?
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;各 &lt;code&gt;setter&lt;&#x2F;code&gt; メソッドの型シグネチャでは、対象のフィールドが &lt;code&gt;Option&lt;&#x2F;code&gt; である場合には内部の型を取り出して、その型をメソッドの引数に指定するだけです。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_setters = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Option である場合には内部の型を取り出してその型を引数に利用する
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(inner_ty) = unwrap_option(ty) {
&lt;&#x2F;span&gt;&lt;span&gt;        quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;#ident(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, #ident: #inner_ty) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident = Some(#ident);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;#ident(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, #ident: #ty) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident = Some(#ident);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここまでできればコンパイルエラーなくテストを PASS させることが可能です。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;07-repeated-field&quot;&gt;07-repeated-field&lt;&#x2F;h2&gt;
&lt;p&gt;次の課題では、さらにマクロの機能を深掘りしていき、特定のフィールドに対して属性を付与すると、付与した値を基準に生成されるコードを動的に変更していきます。&lt;&#x2F;p&gt;
&lt;p&gt;また、以下のように &lt;code&gt;each&lt;&#x2F;code&gt; で指定した名称がフィールド名と重複している場合には、要素を 1 つ 1 つ登録するメソッドの生成を優先し、 &lt;code&gt;Option&lt;&#x2F;code&gt; 型ではないフィールドに対するメソッドを呼び出さなかった場合でもデフォルト値を登録するように機能を変更します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; フィールドに対して追加の属性を割り当てる
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(each = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; フィールドに対して追加の属性を割り当てる
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(each = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; command = Command::builder()
&lt;&#x2F;span&gt;&lt;span&gt;        .executable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 追加した属性に基づいて、Vecを構成する1つ1つの要素を追加していくメソッドを生成する
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; また、生成されるメソッドも属性で指定した名前で生成される
&lt;&#x2F;span&gt;&lt;span&gt;        .arg(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        .arg(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.to_owned())
&lt;&#x2F;span&gt;&lt;span&gt;        .build()
&lt;&#x2F;span&gt;&lt;span&gt;        .unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(command.executable, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(command.args, vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;このような属性は、公式ドキュメント上では &lt;code&gt;derive macro helper attributes&lt;&#x2F;code&gt; と呼ばれており、それ自体はなんらかの処理を行うようなものではなく、マクロに対して追加の情報を送ることでより複雑な処理ができるようにするものです。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;procedural-macros.html#derive-macro-helper-attributes&quot;&gt;Derive macro helper attributes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;実際にこの属性を付与した状態でマクロを実行すると、構造体の1 つ 1 つのフィールドを構成する &lt;code&gt;syn::Field&lt;&#x2F;code&gt; の &lt;code&gt;attrs&lt;&#x2F;code&gt; フィールドに以下の情報が格納されていることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Attribute&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 指定した属性が配列として格納されている
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;vis&lt;&#x2F;span&gt;&lt;span&gt;: Visibility,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;mutability&lt;&#x2F;span&gt;&lt;span&gt;: FieldMutability,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Ident&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;colon_token&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Colon&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ty&lt;&#x2F;span&gt;&lt;span&gt;: Type,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;proc-macro-workshop-builder&#x2F;assets&#x2F;derive-input-attribute.drawio.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;latest&#x2F;syn&#x2F;struct.Field.html&quot;&gt;syn::Field&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;実装方針としては以下のように進めます&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;対象のフィールドが &lt;code&gt;Vec&lt;&#x2F;code&gt; であるかどうかを検証する&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Vec&lt;&#x2F;code&gt; の場合には &lt;code&gt;builder&lt;&#x2F;code&gt; 属性が付与されているかどうかを検証する&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;builder&lt;&#x2F;code&gt; 属性が付与されている場合には &lt;code&gt;each&lt;&#x2F;code&gt; トークンが含まれているのか確認し、適用するメソッド名を抽出する&lt;&#x2F;li&gt;
&lt;li&gt;メソッド名の抽出までできれば、各種 &lt;code&gt;setter&lt;&#x2F;code&gt; や &lt;code&gt;build&lt;&#x2F;code&gt; メソッドで生成するコードを変更する&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;huirudonoxing-nojian-zheng-woxing-uguan-shu-wokuo-zhang-suru&quot;&gt;フィールドの型の検証を行う関数を拡張する&lt;&#x2F;h3&gt;
&lt;p&gt;以前の課題で Command 構造体の各フィールドの型を検証して &lt;code&gt;Option&lt;&#x2F;code&gt; の場合には内部の型を &lt;code&gt;Option&amp;lt;&amp;amp;Type&amp;gt;&lt;&#x2F;code&gt; として返却する &lt;code&gt;unwrap_option&lt;&#x2F;code&gt; 関数を用意していました。&lt;&#x2F;p&gt;
&lt;p&gt;この関数を拡張して、フィールドの型が &lt;code&gt;Option&lt;&#x2F;code&gt; である場合には内部の型を返却し、また &lt;code&gt;Vec&lt;&#x2F;code&gt; である場合にも内部の型を返却します。また返却する型を &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; のままにしてしまうとその後で再度条件分岐させる必要があるため、 &lt;code&gt;Option&lt;&#x2F;code&gt; や &lt;code&gt;Vec&lt;&#x2F;code&gt; やそれ以外の場合も &lt;code&gt;enum&lt;&#x2F;code&gt; で表現するようにします。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;InnerType &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    OptionType(Type),
&lt;&#x2F;span&gt;&lt;span&gt;    VecType(Type),
&lt;&#x2F;span&gt;&lt;span&gt;    PrimitiveType,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;unwrap_ty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ty&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Type) -&amp;gt; InnerType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;後はこの型に合うように条件分岐をさせていきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; Returns InnerType enum with unwrapped Type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;unwrap_ty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ty&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Type) -&amp;gt; InnerType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;syn::Type::Path(syn::TypePath {
&lt;&#x2F;span&gt;&lt;span&gt;        path: syn::Path { segments, .. },
&lt;&#x2F;span&gt;&lt;span&gt;        ..
&lt;&#x2F;span&gt;&lt;span&gt;    }) = ty
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; segments.len() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(syn::PathSegment {
&lt;&#x2F;span&gt;&lt;span&gt;                ident,
&lt;&#x2F;span&gt;&lt;span&gt;                arguments:
&lt;&#x2F;span&gt;&lt;span&gt;                    syn::PathArguments::AngleBracketed(syn::AngleBracketedGenericArguments {
&lt;&#x2F;span&gt;&lt;span&gt;                        args, ..
&lt;&#x2F;span&gt;&lt;span&gt;                    }),
&lt;&#x2F;span&gt;&lt;span&gt;            }) = segments.first()
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; args.len() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(syn::GenericArgument::Type(inner_ty)) = args.first() {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ident == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;InnerType::OptionType(inner_ty.clone());
&lt;&#x2F;span&gt;&lt;span&gt;                        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; ident == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;InnerType::VecType(inner_ty.clone());
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    InnerType::PrimitiveType
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この関数を使用して Builder の各コードを動的に制御していきます。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tokenstream-nopasu&quot;&gt;TokenStream のパース&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Option&lt;&#x2F;code&gt; や &lt;code&gt;Vec&lt;&#x2F;code&gt; のフィールドであるかどうかの検証はできるようになったため、次は &lt;code&gt;Vec&lt;&#x2F;code&gt; であった場合には &lt;code&gt;derive&lt;&#x2F;code&gt; マクロの属性から使用するメソッドの名称を抽出する関数を作成します。&lt;&#x2F;p&gt;
&lt;p&gt;ただし、マクロ内で指定した属性は &lt;code&gt;TokenStream&lt;&#x2F;code&gt; として得られるため、まずは &lt;code&gt;TokenStream&lt;&#x2F;code&gt; をどのようにパースすればいいのかを把握します。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;proc-macro-workshop-builder&#x2F;assets&#x2F;attribute-token-stream.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;まずは &lt;code&gt;syn&lt;&#x2F;code&gt; クレートにおける &lt;code&gt;TokenStream&lt;&#x2F;code&gt; のパースの仕組みを理解していきます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;2.0.28&#x2F;syn&#x2F;parse&#x2F;index.html&quot;&gt;syn::parse&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;syn&lt;&#x2F;code&gt; クレートでは &lt;code&gt;proc_macro2::TokenStream&lt;&#x2F;code&gt; をパースするために様々な parser 関数を提供しており、 &lt;code&gt;fn(input: ParseStream) -&amp;gt; syn::Result&amp;lt;Self&amp;gt;&lt;&#x2F;code&gt; というシグネチャに従って実装することで、トークンを様々な形状にパースすることが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;コードで理解するために、まずは以下のように今回パースする対象と同じような &lt;code&gt;TokenStream&lt;&#x2F;code&gt; を用意します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tokens = quote! { each = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; proc_macro2::TokenStream
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, tokens);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;このコードを実行すれば、上記画像で示したものと同じ構造の &lt;code&gt;TokenStream&lt;&#x2F;code&gt; が生成されていることがわかります。&lt;&#x2F;p&gt;
&lt;p&gt;後はこの構造に従ってパースできるように、それぞれのトークンに合致する型を有した構造体を定義し、 &lt;code&gt;Parse&lt;&#x2F;code&gt; トレイトを実装していきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Token! マクロは指定したトークンに合致する構造体に変換する
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 今回の場合は syn::token::Eq に内部では変換している
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;IdentEqualExpr &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;: syn::Ident,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;eq_token&lt;&#x2F;span&gt;&lt;span&gt;: syn::Token![=],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;: syn::Expr,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;syn::parse::Parse for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;IdentEqualExpr &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: syn::parse::ParseStream) -&amp;gt; syn::Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; パースしたい順番に従って parse メソッドを呼び出す
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 内部でカーソル位置が移動するため、正しい順番で呼び出す必要がある
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = input.parse()?;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; syn::Ident にパース
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; eq_token = input.parse()?; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; syn::token::Eq にパース
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expr = input.parse()?;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; syn::Expr にパース
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            ident,
&lt;&#x2F;span&gt;&lt;span&gt;            eq_token,
&lt;&#x2F;span&gt;&lt;span&gt;            expr,
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;動作確認のために &lt;code&gt;proc_macro2::TokenStream&lt;&#x2F;code&gt; をパースするための &lt;code&gt;syn::parse2&lt;&#x2F;code&gt; を実行して結果を確認すると、ストリームから指定した型に正しくパースできていることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tokens = quote! { each = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident_equal_expr = syn::parse2::&amp;lt;IdentEqualExpr&amp;gt;(tokens);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; ident_equal_expr {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 出力結果は以下のようになり、指定した通りにパースできていることがわかる
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 後は 文字列リテラル を表している syn::LitStr から値を取り出せばよい
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         * IdentEqualExpr {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *     ident: Ident(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *         each,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *     ),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *     eq_token: Eq,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *     expr: Expr::Lit {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *         attrs: [],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *         lit: Lit::Str {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *             token: &amp;quot;arg&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *         },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *     },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         * }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;         *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(value) =&amp;gt; println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, value),
&lt;&#x2F;span&gt;&lt;span&gt;        Err(_) =&amp;gt; panic!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;unexpected token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;syn&lt;&#x2F;code&gt; クレートは似たような構造をパースするための型として &lt;code&gt;syn::MetaNameValue&lt;&#x2F;code&gt; を用意している。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MetaNameValue &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: Path,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;eq_token&lt;&#x2F;span&gt;&lt;span&gt;: Eq,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: Expr,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;2.0.28&#x2F;syn&#x2F;struct.MetaNameValue.html&quot;&gt;syn::MetaNameValue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;最初のフィールドに関しては &lt;code&gt;syn::Ident&lt;&#x2F;code&gt; ではなく &lt;code&gt;syn::Path&lt;&#x2F;code&gt; として定義されているため利用することができないように思えますが、実は &lt;code&gt;From&lt;&#x2F;code&gt; トレイトを以下のように実装しているため、入力が &lt;code&gt;Ident&lt;&#x2F;code&gt; であってもこの型を利用して変換することが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;2.0.28&#x2F;src&#x2F;syn&#x2F;path.rs.html#13-25
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; From&amp;lt;T&amp;gt; for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Path
&lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    T: Into&amp;lt;PathSegment&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;segment&lt;&#x2F;span&gt;&lt;span&gt;: T) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; path = Path {
&lt;&#x2F;span&gt;&lt;span&gt;            leading_colon: None,
&lt;&#x2F;span&gt;&lt;span&gt;            segments: Punctuated::new(),
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        path.segments.push_value(segment.into());
&lt;&#x2F;span&gt;&lt;span&gt;        path
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;2.0.28&#x2F;src&#x2F;syn&#x2F;path.rs.html#96-106
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; From&amp;lt;T&amp;gt; for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;PathSegment
&lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    T: Into&amp;lt;Ident&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;: T) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        PathSegment {
&lt;&#x2F;span&gt;&lt;span&gt;            ident: ident.into(),
&lt;&#x2F;span&gt;&lt;span&gt;            arguments: PathArguments::None,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;そのため今回のように &lt;code&gt;each = &quot;arg&quot;&lt;&#x2F;code&gt; の構造をパースして、中身の値を取り出す場合には、以下のような実装にしておけばよく、 &lt;code&gt;Field&lt;&#x2F;code&gt; には複数の &lt;code&gt;Attribute&lt;&#x2F;code&gt; が指定されるため、最初の値のみを取り出して利用する形にします。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; unwrap first value from #[builder(each = value)] attribute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;unwrap_builder_attr_value&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[syn::Attribute]) -&amp;gt; Option&amp;lt;String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    attrs.iter().find_map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; attr.path().is_ident(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Ok(syn::MetaNameValue {
&lt;&#x2F;span&gt;&lt;span&gt;                value:
&lt;&#x2F;span&gt;&lt;span&gt;                    syn::Expr::Lit(syn::ExprLit {
&lt;&#x2F;span&gt;&lt;span&gt;                        lit: syn::Lit::Str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; liststr),
&lt;&#x2F;span&gt;&lt;span&gt;                        ..
&lt;&#x2F;span&gt;&lt;span&gt;                    }),
&lt;&#x2F;span&gt;&lt;span&gt;                ..
&lt;&#x2F;span&gt;&lt;span&gt;            }) = attr.parse_args::&amp;lt;syn::MetaNameValue&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Some(liststr.value());
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;None;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        None
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで属性の値を取り出す関数は完成です。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sheng-cheng-surushi-zhuang-kodonobian-geng&quot;&gt;生成する実装コードの変更&lt;&#x2F;h3&gt;
&lt;p&gt;ここまでで Builder を適用した構造体に対して、各フィールドの型を &lt;code&gt;Vec&lt;&#x2F;code&gt; や &lt;code&gt;Option&lt;&#x2F;code&gt; としてパースする方法や、 &lt;code&gt;builder(each = &quot;arg&quot;)&lt;&#x2F;code&gt; のように付与された属性から &lt;code&gt;&quot;arg&quot;&lt;&#x2F;code&gt; という値を取り出すことができるようになりました。&lt;&#x2F;p&gt;
&lt;p&gt;後は元々の Builder の実装から以下の箇所を変更していきます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;build メソッド
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vec&lt;&#x2F;code&gt; の場合には &lt;code&gt;None&lt;&#x2F;code&gt; で初期化していた箇所を、 &lt;code&gt;Vec::new&lt;&#x2F;code&gt; で初期化&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Builder の各種 &lt;code&gt;setter&lt;&#x2F;code&gt; は、 &lt;code&gt;Vec&lt;&#x2F;code&gt; の場合には以下条件で実装する
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;each = expr&lt;&#x2F;code&gt; の指定がない場合は今まで通りに実装する&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;each = expr&lt;&#x2F;code&gt; の指定がある場合
&lt;ul&gt;
&lt;li&gt;フィールド名と重複していない場合は、メソッドを新しく追加する&lt;&#x2F;li&gt;
&lt;li&gt;フィールド名と重複している場合は、個別に設定するメソッドを優先する&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;まずは build メソッドを以下のように変更します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; build_fields = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;unwrap_ty(ty) {
&lt;&#x2F;span&gt;&lt;span&gt;        InnerType::OptionType(_) =&amp;gt; quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            #ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident.take()
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        InnerType::VecType(_) =&amp;gt; quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; None でも失敗しないように Vec::new で初期化する
&lt;&#x2F;span&gt;&lt;span&gt;            #ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident.take().unwrap_or_else(Vec::new)
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        InnerType::PrimitiveType =&amp;gt; quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            #ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident.take().ok_or(format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt; is not set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, stringify!(#ident)))?
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; として定義されているフィールドに対して &lt;code&gt;setter&lt;&#x2F;code&gt; が呼び出されていない場合でも初期値が代入されるようになりました。&lt;&#x2F;p&gt;
&lt;p&gt;次に &lt;code&gt;setter&lt;&#x2F;code&gt; メソッドの定義を以下のように変更します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ty の場合も inner_ty の場合も同じ構造なので、依存を引数に移動させて、生成するストリームを制御する
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;generate_default_setter_with&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Option&amp;lt;syn::Ident&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ty&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;syn::Type,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; proc_macro2::TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;#ident(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, #ident: #ty) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident = Some(#ident);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_setters = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;unwrap_ty(ty) {
&lt;&#x2F;span&gt;&lt;span&gt;        InnerType::VecType(inner_ty) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; default_setter = generate_default_setter_with(ident, ty);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(each) = unwrap_builder_attr_value(&amp;amp;f.attrs) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; each_ident = format_ident!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, each);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vec_setters = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;#each_ident(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, #each_ident: #inner_ty) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;ref mut&lt;&#x2F;span&gt;&lt;span&gt; values) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident {
&lt;&#x2F;span&gt;&lt;span&gt;                            values.push(#each_ident);
&lt;&#x2F;span&gt;&lt;span&gt;                        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident = Some(vec![#each_ident]);
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ident.clone().unwrap() == each_ident {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; vec_setters;
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                        #vec_setters
&lt;&#x2F;span&gt;&lt;span&gt;                        #default_setter
&lt;&#x2F;span&gt;&lt;span&gt;                    };
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; default_setter;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        InnerType::OptionType(inner_ty) =&amp;gt; generate_default_setter_with(ident, &amp;amp;inner_ty),
&lt;&#x2F;span&gt;&lt;span&gt;        InnerType::PrimitiveType =&amp;gt; generate_default_setter_with(ident, ty),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでコンパイルエラーが発生することなくテストを PASS させることができました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;08-unrecognized-attribute&quot;&gt;08-unrecognized-attribute&lt;&#x2F;h2&gt;
&lt;p&gt;次の課題では、フィールドで使用する属性に意図していない値が指定された場合にユーザーに対してわかりやすいコンパイルエラーを表示させることを目指します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(eac = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 本当は each を設定しないといけない
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;テストで利用している &lt;code&gt;trybuild&lt;&#x2F;code&gt; ではコンパイルエラー自体のテストも実行することが可能であり、以下のようにテキストとして用意したエラーメッセージを利用してアサーションを行うことが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 08-unrecognized-attribute.stderr
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span&gt; expected `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(each = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)`
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; tests&#x2F;08-unrecognized-attribute.rs:22:7
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;22 &lt;&#x2F;span&gt;&lt;span&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#[builder(eac = &amp;quot;arg&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;   |       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;^^^^^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;コンパイルエラーを発生させる方法の 1 つに標準ライブラリから &lt;code&gt;compile_error!&lt;&#x2F;code&gt; マクロが用意されており、手続きマクロでも利用することで間違った指定を行なったユーザーに対してコンパイルエラーを伝えることが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;実装方針としては、今まで &lt;code&gt;each&lt;&#x2F;code&gt; という名称を気にせずに値のみを取り出していた下記の処理を変更し、 &lt;code&gt;each&lt;&#x2F;code&gt; である &lt;code&gt;syn::Ident&lt;&#x2F;code&gt; であるかどうかも検証するように変更します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; unwrap first value from #[builder(each = value)] attribute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;unwrap_builder_attr_value&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[syn::Attribute]) -&amp;gt; Option&amp;lt;String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    attrs.iter().find_map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; attr.path().is_ident(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Ok(syn::MetaNameValue {
&lt;&#x2F;span&gt;&lt;span&gt;                value:
&lt;&#x2F;span&gt;&lt;span&gt;                    syn::Expr::Lit(syn::ExprLit {
&lt;&#x2F;span&gt;&lt;span&gt;                        lit: syn::Lit::Str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; liststr),
&lt;&#x2F;span&gt;&lt;span&gt;                        ..
&lt;&#x2F;span&gt;&lt;span&gt;                    }),
&lt;&#x2F;span&gt;&lt;span&gt;                ..
&lt;&#x2F;span&gt;&lt;span&gt;            }) = attr.parse_args::&amp;lt;syn::MetaNameValue&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 以下では each という属性の値を気にせずに中身を取り出すようにしていた
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Some(liststr.value());
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;None;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        None
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;現状の返却値である &lt;code&gt;Option&amp;lt;String&amp;gt;&lt;&#x2F;code&gt; だと細かい制御ができないため、以下のように &lt;code&gt;each&lt;&#x2F;code&gt; が存在した場合とそうではない場合を把握できるように型シグネチャを変更します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ParseBuilderAttributeResult &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Valid(String),
&lt;&#x2F;span&gt;&lt;span&gt;    Invalid(syn::Meta),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;後は該当する処理の箇所で &lt;code&gt;syn::Ident&lt;&#x2F;code&gt; が &lt;code&gt;each&lt;&#x2F;code&gt; であることを検証する処理を追加します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; unwrap first value from #[builder(each = value)] attribute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;unwrap_builder_attr_value&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[syn::Attribute]) -&amp;gt; Option&amp;lt;ParseBuilderAttributeResult&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    attrs.iter().find_map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; attr.path().is_ident(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Ok(syn::MetaNameValue {
&lt;&#x2F;span&gt;&lt;span&gt;                value:
&lt;&#x2F;span&gt;&lt;span&gt;                    syn::Expr::Lit(syn::ExprLit {
&lt;&#x2F;span&gt;&lt;span&gt;                        lit: syn::Lit::Str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; liststr),
&lt;&#x2F;span&gt;&lt;span&gt;                        ..
&lt;&#x2F;span&gt;&lt;span&gt;                    }),
&lt;&#x2F;span&gt;&lt;span&gt;                path,
&lt;&#x2F;span&gt;&lt;span&gt;                ..
&lt;&#x2F;span&gt;&lt;span&gt;            }) = attr.parse_args::&amp;lt;syn::MetaNameValue&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ここで検証する内容と返却値を変更する
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!path.is_ident(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Some(ParseBuilderAttributeResult::Invalid(attr.meta.clone()));
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Some(ParseBuilderAttributeResult::Valid(liststr.value()));
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;None;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        None
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;後は &lt;code&gt;setter&lt;&#x2F;code&gt; を生成する際に、以下のように &lt;code&gt;Invalid&lt;&#x2F;code&gt; なパターンの場合には &lt;code&gt;to_compile_error&lt;&#x2F;code&gt; を利用して &lt;code&gt;TokenStream&lt;&#x2F;code&gt; を作成するようにすることで、コンパイルエラーを伝えることができるようになります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_setters = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;unwrap_ty(ty) {
&lt;&#x2F;span&gt;&lt;span&gt;        InnerType::VecType(inner_ty) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; default_setter = generate_default_setter_with(ident, ty);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ここを Invalid な場合に処理する
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;unwrap_builder_attr_value(&amp;amp;f.attrs) {
&lt;&#x2F;span&gt;&lt;span&gt;                Some(ParseBuilderAttributeResult::Valid(each)) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; each_ident = format_ident!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, each);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vec_setters = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;#each_ident(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, #each_ident: #inner_ty) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;ref mut&lt;&#x2F;span&gt;&lt;span&gt; values) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident {
&lt;&#x2F;span&gt;&lt;span&gt;                                values.push(#each_ident);
&lt;&#x2F;span&gt;&lt;span&gt;                            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident = Some(vec![#each_ident]);
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ident.clone().unwrap() == each_ident {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; vec_setters;
&lt;&#x2F;span&gt;&lt;span&gt;                    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                            #vec_setters
&lt;&#x2F;span&gt;&lt;span&gt;                            #default_setter
&lt;&#x2F;span&gt;&lt;span&gt;                        };
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; TokenStream なので返却する値の型は合うようになっている
&lt;&#x2F;span&gt;&lt;span&gt;                Some(ParseBuilderAttributeResult::Invalid(meta)) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;syn::Error::new_spanned(meta, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;expected `builder(each = \&amp;quot;...\&amp;quot;)`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                        .to_compile_error()
&lt;&#x2F;span&gt;&lt;span&gt;                        .into()
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                None =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; default_setter,
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        InnerType::OptionType(inner_ty) =&amp;gt; generate_default_setter_with(ident, &amp;amp;inner_ty),
&lt;&#x2F;span&gt;&lt;span&gt;        InnerType::PrimitiveType =&amp;gt; generate_default_setter_with(ident, ty),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;1.0.109&#x2F;syn&#x2F;struct.Error.html#method.to_compile_error&quot;&gt;to_compile_error&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;これで以下のように間違った値を指定した場合にはコンパイルエラーが発生するようになりました。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;proc-macro-workshop-builder&#x2F;assets&#x2F;compile-error.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;09-redefined-prelude-type&quot;&gt;09-redefined-prelude-type&lt;&#x2F;h2&gt;
&lt;p&gt;最後の課題は、ユーザーが独自に定義した型と生成するコード内で使用している型が被ってしまった場合の対応になります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Option &lt;&#x2F;span&gt;&lt;span&gt;= ();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Some &lt;&#x2F;span&gt;&lt;span&gt;= ();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span&gt;= ();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span&gt;= ();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Box &lt;&#x2F;span&gt;&lt;span&gt;= ();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;今までの &lt;code&gt;cargo expand&lt;&#x2F;code&gt; を実行した結果から分かるように、マクロはコンパイル時に展開されて Rust コードとして実行されます。&lt;&#x2F;p&gt;
&lt;p&gt;つまり &lt;code&gt;quote!&lt;&#x2F;code&gt; 内で名前空間を指定せずに &lt;code&gt;Result&lt;&#x2F;code&gt; のように指定している場合には、テストコードのようにユーザー側で &lt;code&gt;type Result = ()&lt;&#x2F;code&gt; と内部で使用している型と同じ名称の型を宣言してしまうと、意図していない型が適用されてしまいます。&lt;&#x2F;p&gt;
&lt;p&gt;そこで &lt;code&gt;quote!&lt;&#x2F;code&gt; 内で生成するコードに対しては、以下のように名前空間を指定します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expanded = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        #(#builder_setters)*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Result や Box の名前空間を指定する
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; std::result::Result&amp;lt;#ident, std::boxed::Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(#ident {
&lt;&#x2F;span&gt;&lt;span&gt;                #(#build_fields,)*
&lt;&#x2F;span&gt;&lt;span&gt;            })
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;他にも &lt;code&gt;Option&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;Some&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;None&lt;&#x2F;code&gt; を利用している箇所で名前空間のパスを指定するようにすれば、テストは PASS できます。&lt;&#x2F;p&gt;
&lt;p&gt;これで &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;proc-macro-workshop&quot;&gt;proc-macro-workshop&lt;&#x2F;a&gt; の Builder マクロの課題は完了です！&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wan-cheng-sitakodo&quot;&gt;完成したコード&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;use proc_macro::TokenStream;
&lt;&#x2F;span&gt;&lt;span&gt;use quote::{format_ident, quote};
&lt;&#x2F;span&gt;&lt;span&gt;use syn::{parse_macro_input, punctuated::Punctuated, DeriveInput, Type};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;InnerType &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    OptionType(Type),
&lt;&#x2F;span&gt;&lt;span&gt;    VecType(Type),
&lt;&#x2F;span&gt;&lt;span&gt;    PrimitiveType,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; Returns InnerType enum with unwrapped Type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;unwrap_ty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ty&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Type) -&amp;gt; InnerType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;syn::Type::Path(syn::TypePath {
&lt;&#x2F;span&gt;&lt;span&gt;        path: syn::Path { segments, .. },
&lt;&#x2F;span&gt;&lt;span&gt;        ..
&lt;&#x2F;span&gt;&lt;span&gt;    }) = ty
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; segments.len() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(syn::PathSegment {
&lt;&#x2F;span&gt;&lt;span&gt;                ident,
&lt;&#x2F;span&gt;&lt;span&gt;                arguments:
&lt;&#x2F;span&gt;&lt;span&gt;                    syn::PathArguments::AngleBracketed(syn::AngleBracketedGenericArguments {
&lt;&#x2F;span&gt;&lt;span&gt;                        args, ..
&lt;&#x2F;span&gt;&lt;span&gt;                    }),
&lt;&#x2F;span&gt;&lt;span&gt;            }) = segments.first()
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; args.len() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(syn::GenericArgument::Type(inner_ty)) = args.first() {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ident == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;InnerType::OptionType(inner_ty.clone());
&lt;&#x2F;span&gt;&lt;span&gt;                        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; ident == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;InnerType::VecType(inner_ty.clone());
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    InnerType::PrimitiveType
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ParseBuilderAttributeResult &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Valid(String),
&lt;&#x2F;span&gt;&lt;span&gt;    Invalid(syn::Meta),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; unwrap first value from #[builder(each = value)] attribute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;unwrap_builder_attr_value&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[syn::Attribute]) -&amp;gt; Option&amp;lt;ParseBuilderAttributeResult&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    attrs.iter().find_map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; attr.path().is_ident(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Ok(syn::MetaNameValue {
&lt;&#x2F;span&gt;&lt;span&gt;                value:
&lt;&#x2F;span&gt;&lt;span&gt;                    syn::Expr::Lit(syn::ExprLit {
&lt;&#x2F;span&gt;&lt;span&gt;                        lit: syn::Lit::Str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; liststr),
&lt;&#x2F;span&gt;&lt;span&gt;                        ..
&lt;&#x2F;span&gt;&lt;span&gt;                    }),
&lt;&#x2F;span&gt;&lt;span&gt;                path,
&lt;&#x2F;span&gt;&lt;span&gt;                ..
&lt;&#x2F;span&gt;&lt;span&gt;            }) = attr.parse_args::&amp;lt;syn::MetaNameValue&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!path.is_ident(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Some(ParseBuilderAttributeResult::Invalid(attr.meta.clone()));
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Some(ParseBuilderAttributeResult::Valid(liststr.value()));
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;None;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        None
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;extract_named_fields&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;syn::Data) -&amp;gt; &amp;amp;Punctuated&amp;lt;syn::Field, syn::token::Comma&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;syn::Data::Struct(syn::DataStruct { fields: syn::Fields::Named(syn::FieldsNamed{ named, .. }), .. }) = data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        unimplemented!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;This macro can only be applied to struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    named
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ty の場合も inner_ty の場合も同じ構造なので、依存を引数に移動させて、生成するストリームを制御する
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;generate_default_setter_with&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Option&amp;lt;syn::Ident&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ty&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;syn::Type,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; proc_macro2::TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;#ident(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, #ident: #ty) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident = Some(#ident);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;attributes&lt;&#x2F;span&gt;&lt;span&gt;(builder))]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = parse_macro_input!(input as DeriveInput);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; original_ident = parsed.ident;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_ident = format_ident!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;{}Builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, original_ident);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; named = extract_named_fields(&amp;amp;parsed.data);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_fields = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;unwrap_ty(ty) {
&lt;&#x2F;span&gt;&lt;span&gt;            InnerType::OptionType(_) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                    #ident: #ty
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            _ =&amp;gt; quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                #ident: std::option::Option&amp;lt;#ty&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_setters = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;unwrap_ty(ty) {
&lt;&#x2F;span&gt;&lt;span&gt;            InnerType::VecType(inner_ty) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; default_setter = generate_default_setter_with(ident, ty);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;unwrap_builder_attr_value(&amp;amp;f.attrs) {
&lt;&#x2F;span&gt;&lt;span&gt;                    Some(ParseBuilderAttributeResult::Valid(each)) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; each_ident = format_ident!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, each);
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vec_setters = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;#each_ident(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, #each_ident: #inner_ty) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;ref mut&lt;&#x2F;span&gt;&lt;span&gt; values) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident {
&lt;&#x2F;span&gt;&lt;span&gt;                                    values.push(#each_ident);
&lt;&#x2F;span&gt;&lt;span&gt;                                } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident = std::option::Option::Some(vec![#each_ident]);
&lt;&#x2F;span&gt;&lt;span&gt;                                }
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ident.clone().unwrap() == each_ident {
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; vec_setters;
&lt;&#x2F;span&gt;&lt;span&gt;                        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                                #vec_setters
&lt;&#x2F;span&gt;&lt;span&gt;                                #default_setter
&lt;&#x2F;span&gt;&lt;span&gt;                            };
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    Some(ParseBuilderAttributeResult::Invalid(meta)) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;syn::Error::new_spanned(meta, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;expected `builder(each = \&amp;quot;...\&amp;quot;)`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                            .to_compile_error()
&lt;&#x2F;span&gt;&lt;span&gt;                            .into()
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    None =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; default_setter,
&lt;&#x2F;span&gt;&lt;span&gt;                };
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            InnerType::OptionType(inner_ty) =&amp;gt; generate_default_setter_with(ident, &amp;amp;inner_ty),
&lt;&#x2F;span&gt;&lt;span&gt;            InnerType::PrimitiveType =&amp;gt; generate_default_setter_with(ident, ty),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; builder_init = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;        quote! {
&lt;&#x2F;span&gt;&lt;span&gt;            #ident: std::option::Option::None
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; build_fields = named.iter().map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = &amp;amp;f.ident;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ty = &amp;amp;f.ty;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;unwrap_ty(ty) {
&lt;&#x2F;span&gt;&lt;span&gt;            InnerType::OptionType(_) =&amp;gt; quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                #ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident.take()
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            InnerType::VecType(_) =&amp;gt; quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                #ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident.take().unwrap_or_else(Vec::new)
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            InnerType::PrimitiveType =&amp;gt; quote! {
&lt;&#x2F;span&gt;&lt;span&gt;                #ident: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.#ident.take().ok_or(format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt; is not set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, stringify!(#ident)))?
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expanded = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            #(#builder_fields,)*
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            #(#builder_setters)*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; std::result::Result&amp;lt;#original_ident, std::boxed::Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                Ok(#original_ident {
&lt;&#x2F;span&gt;&lt;span&gt;                    #(#build_fields,)*
&lt;&#x2F;span&gt;&lt;span&gt;                })
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;original_ident &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; #builder_ident {
&lt;&#x2F;span&gt;&lt;span&gt;                #builder_ident {
&lt;&#x2F;span&gt;&lt;span&gt;                    #(#builder_init,)*
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    expanded.into()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zhui-jia-ke-ti-tracing-attributes-kuretonoyounafu-za-nashu-xing-nopasu&quot;&gt;追加課題: &lt;code&gt;tracing-attributes&lt;&#x2F;code&gt; クレートのような複雑な属性のパース&lt;&#x2F;h2&gt;
&lt;p&gt;Builder マクロの作成では以下のように付与された属性をパースして、動的にコードを生成していました。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Builder)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executable&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(each = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; builder という属性で name = expr 形式で指定する
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;(each = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]　&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; builder という属性で name = expr 形式で指定する
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_dir&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;サードパーティクレートの中には複雑なパースを行なっているものもあり、その 1 つが &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing-attributes&#x2F;0.1.11&#x2F;tracing_attributes&#x2F;attr.instrument.html&quot;&gt;tracing-attributes&lt;&#x2F;a&gt; クレートです。&lt;&#x2F;p&gt;
&lt;p&gt;このクレートが提供しているものは derive マクロではなく attributes マクロではありますが、分散トレーシングのために以下のような複雑な設定を行うことが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;instrument&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    level = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    target = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my_target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span&gt;(non_debug),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;(foo=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, id=1, show=true),
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;my_function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;non_debug&lt;&#x2F;span&gt;&lt;span&gt;: NonDebug) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;今回は &lt;code&gt;tracing-attributes&lt;&#x2F;code&gt; クレートが複雑な属性をどのようにパースしているのかを理解するために、以下の属性をパースすることを目標に進めていきます。なお、元々の課題とは関係ありません。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tokens = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        skip(form, state),
&lt;&#x2F;span&gt;&lt;span&gt;        fields(
&lt;&#x2F;span&gt;&lt;span&gt;            username=name,
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;she-ji-fang-zhen&quot;&gt;設計方針&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;proc-macro-workshop-builder&#x2F;#07-repeated-field&quot;&gt;07-repeated-field&lt;&#x2F;a&gt; で行なったように、入力される &lt;code&gt;TokenStream&lt;&#x2F;code&gt; をどのような型としてパースするのかをまずは決める必要があります。&lt;&#x2F;p&gt;
&lt;p&gt;課題の時には以下のように属性の名称と設定された値を一緒の構造体にパースしていましたが、これだとパースできてもコード側でどの属性に対応するものなのかを判定する必要が出てくるため、複数の属性をパースする必要がある場合にはコードが煩雑になってしまいます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;IdentEqualExpr &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;: syn::Ident,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;eq_token&lt;&#x2F;span&gt;&lt;span&gt;: syn::Token![=],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;: syn::Expr,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;今回は &lt;code&gt;name&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;skip&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;fields&lt;&#x2F;code&gt; という 3 つの属性を利用することがあらかじめ決まっており、それぞれの属性に対してどのような値を設定できるのかも決まっているため、Rust の型安全性による恩恵を受けるため、パースできた時点で実装側にできるだけ条件分岐が不要になるようにしていくことを目指します。&lt;&#x2F;p&gt;
&lt;p&gt;そこでパース対象の属性名を構造体のフィールド名に設定し、対応する値にパースできた値を登録できるように、以下のように、 &lt;code&gt;Parse&lt;&#x2F;code&gt; するための構造体とデータを保持するための構造体を設計します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Args &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;syn::LitStr&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;skips&lt;&#x2F;span&gt;&lt;span&gt;: HashSet&amp;lt;syn::Ident&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Fields&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; name = expr の形式に対して Parse を実装するための構造体
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; name は固定なので Key として保持する必要はない
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;NameValue&lt;&#x2F;span&gt;&lt;span&gt;(syn::LitStr);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; skip(xxx, yyy) の形式に対して Parse を実装するための構造体
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Skips&lt;&#x2F;span&gt;&lt;span&gt;(HashSet&amp;lt;syn::Ident&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; fields(key1=value1, key2=value2) の形式に対して Parse を実装するための構造体
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Fields&lt;&#x2F;span&gt;&lt;span&gt;(Punctuated&amp;lt;Field, Token![,]&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Key と Value は自由に設定できるため、両方を保持できるようにする
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: syn::Ident,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;syn::Expr&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この構造体に対して、それぞれ &lt;code&gt;Parse&lt;&#x2F;code&gt; トレイトの実装を行なっていきます。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parse-toreitonoshi-zhuang-shu-xing-zhi-nopasu&quot;&gt;Parse トレイトの実装 - 属性値のパース&lt;&#x2F;h3&gt;
&lt;p&gt;まずはそれぞれのフィールドに対して &lt;code&gt;Parse&lt;&#x2F;code&gt; トレイトの実装を進めていきますが、今回はフィールド値が決まっているため、 &lt;code&gt;syn::custom_keyword!&lt;&#x2F;code&gt; を利用してパース対象の値を定義していきます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;2.0.28&#x2F;syn&#x2F;macro.custom_keyword.html&quot;&gt;syn::custom_keyword&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;syn::custom_keyword!&lt;&#x2F;code&gt; マクロを利用して以下のように定義すれば、自動的に複数の機能が実装された構造体を生成することが可能です。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Peeking — &lt;code&gt;input.peek(kw::whatever)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Parsing — &lt;code&gt;input.parse::&amp;lt;kw::whatever&amp;gt;()?&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Printing — &lt;code&gt;quote!( ... #whatever_token ... )&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Span からのトークン生成 — &lt;code&gt;let whatever_token = kw::whatever(sp)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;該当 Span へのアクセス — &lt;code&gt;let sp = whatever_token.span&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;kw &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    syn::custom_keyword!(name);
&lt;&#x2F;span&gt;&lt;span&gt;    syn::custom_keyword!(skip);
&lt;&#x2F;span&gt;&lt;span&gt;    syn::custom_keyword!(fields);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで &lt;code&gt;TokenStream&lt;&#x2F;code&gt; 内に指定したキーが存在する場合にはパースすることが可能になりました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parse-toreitonoshi-zhuang-name-nopasu&quot;&gt;Parse トレイトの実装 - name のパース&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;name&lt;&#x2F;code&gt; 属性をパースするには、 &lt;code&gt;name = expr&lt;&#x2F;code&gt; 形式のパース用に用意した以下の構造体に対して &lt;code&gt;Parse&lt;&#x2F;code&gt; トレイトの実装が必要になります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;NameValue&lt;&#x2F;span&gt;&lt;span&gt;(syn::LitStr);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;実装自体は非常にシンプルであり、想定通りの &lt;code&gt;TokenStream&lt;&#x2F;code&gt; が入力されることを前提にして、構造体を構築するのに必要な部分のみを抽出していけば OK です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;syn::parse::Parse for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;NameValue &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; input の TokenSteam は「 name = expr 」 を前提としたストリームが入力される前提
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: syn::parse::ParseStream) -&amp;gt; syn::Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 以下2つは保持する必要がないので、Cursorを進めるだけにする
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = input.parse::&amp;lt;kw::name&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = input.parse::&amp;lt;Token![=]&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = input.parse()?;
&lt;&#x2F;span&gt;&lt;span&gt;         Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;(value))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;parse-toreitonoshi-zhuang-skip-nopasu&quot;&gt;Parse トレイトの実装 - skip のパース&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;skip&lt;&#x2F;code&gt; 属性をパースするには、 &lt;code&gt;skip(xxx, yyy)&lt;&#x2F;code&gt; 形式のパース用に用意した以下の構造体に対して &lt;code&gt;Parse&lt;&#x2F;code&gt; トレイトの実装が必要になります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Skips&lt;&#x2F;span&gt;&lt;span&gt;(HashSet&amp;lt;syn::Ident&amp;gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この属性は Key-Value 形式ではなく、コンマ区切りで指定された値を保持できるようにするために、以下のように &lt;code&gt;Parse&lt;&#x2F;code&gt; トレイトを実装していきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;syn::parse::Parse for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Skips &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; input の TokenSteam は「 skip(xxx, yyy, ...) 」 を前提としたストリームが入力される前提
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: syn::parse::ParseStream) -&amp;gt; syn::Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = input.parse::&amp;lt;kw::skip&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; content;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = syn::parenthesized!(content in input);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Punctuated&amp;lt;Ident, Comma&amp;gt; としてパースされる
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; names = content.parse_terminated(syn::Ident::parse_any, Token![,])?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; skips = HashSet::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; name in names {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; skips.contains(&amp;amp;name) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            skips.insert(name);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;(skips))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;(xxx, yyy)&lt;&#x2F;code&gt; のような形式をパースするためには、まずは始まりのかっこ（ &lt;code&gt;(&lt;&#x2F;code&gt; ）と閉じかっこ（ &lt;code&gt;)&lt;&#x2F;code&gt; ）が存在していることを前提に、コンマ区切りで 1 つ 1 つの値をパースする必要があります。&lt;&#x2F;p&gt;
&lt;p&gt;そのために実装で利用しているように &lt;code&gt;syn::parenthesized!&lt;&#x2F;code&gt; マクロを利用してどのような記号で囲っているのかを指定し、 &lt;code&gt;content.parse_terminated&lt;&#x2F;code&gt; マクロを利用してどの記号区切りでどの値としてパースするのかを指定することができます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;2.0.28&#x2F;syn&#x2F;macro.parenthesized.html&quot;&gt;syn::parenthesized&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;2.0.28&#x2F;syn&#x2F;parse&#x2F;struct.ParseBuffer.html#method.parse_terminated&quot;&gt;parse_terminated&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;parse-toreitonoshi-zhuang-fields-nopasu&quot;&gt;Parse トレイトの実装 - fields のパース&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;fields&lt;&#x2F;code&gt; 属性をパースするには、 &lt;code&gt;fields(key1=value1, key2=value2)&lt;&#x2F;code&gt; 形式のパース用に用意した以下の構造体に対して &lt;code&gt;Parse&lt;&#x2F;code&gt; トレイトの実装が必要になります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; fields(...) 形式をパースするための構造体
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Fields&lt;&#x2F;span&gt;&lt;span&gt;(Punctuated&amp;lt;Field, Token![,]&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; key = value 形式を1つ1つパースするための構造体
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: syn::Ident,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;syn::Expr&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;まずは &lt;code&gt;fields(...)&lt;&#x2F;code&gt; 形式をパースしますが、これは 1 つ前の &lt;code&gt;skip&lt;&#x2F;code&gt; 属性とほとんど同じようにパースすることが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;syn::parse::Parse for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Fields &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; input の TokenSteam は「 fields(...) 」 を前提としたストリームが入力される前提
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 1つ1つの 「 key=value 」 は Field 型としてパースする
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: syn::parse::ParseStream) -&amp;gt; syn::Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = input.parse::&amp;lt;kw::fields&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; content;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = syn::parenthesized!(content in input);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fields = content.parse_terminated(Field::parse, Token![,])?;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;(fields))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;次に &lt;code&gt;key = value&lt;&#x2F;code&gt; 形式をパースしますが、現時点では &lt;code&gt;=&lt;&#x2F;code&gt; のみをサポートするようにします。&lt;&#x2F;p&gt;
&lt;p&gt;なお &lt;code&gt;tracing-attributes&lt;&#x2F;code&gt; クレートはログ出力用の &lt;code&gt;%&lt;&#x2F;code&gt; やデバッグ出力用の &lt;code&gt;?&lt;&#x2F;code&gt; もサポートしています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;syn::parse::Parse for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; input の TokenSteam は「 key=value 」 を前提としたストリームが入力される前提
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: syn::parse::ParseStream) -&amp;gt; syn::Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key = input.parse()?;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 「 = 」 がある場合には Cursor を進めて Expr の部分を取り出す
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; input.peek(Token![=]) {
&lt;&#x2F;span&gt;&lt;span&gt;            input.parse::&amp;lt;Token![=]&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;            Some(input.parse()?)
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            None
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{ key, value })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;parse-toreitonoshi-zhuang-args-nopasu&quot;&gt;Parse トレイトの実装 - Args のパース&lt;&#x2F;h3&gt;
&lt;p&gt;最後にこれまでに実装を型を利用して、 &lt;code&gt;TokenStream&lt;&#x2F;code&gt; 全体をパースするための &lt;code&gt;Args&lt;&#x2F;code&gt; 型に対して &lt;code&gt;Parse&lt;&#x2F;code&gt; トレイトの実装を進めていきます。&lt;&#x2F;p&gt;
&lt;p&gt;Builder の場合と異なり、属性の値が複数設定することが可能であるため、属性の値に応じてどの型でパースするのかを決定する必要があります。&lt;&#x2F;p&gt;
&lt;p&gt;そうした場合に利用できるものが &lt;code&gt;ParseStream&lt;&#x2F;code&gt; が提供している以下のメソッドです。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lookahead1&lt;&#x2F;code&gt;:  &lt;code&gt;TokenStream&lt;&#x2F;code&gt; からの次のトークンを 1 つだけ参照する&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;peek&lt;&#x2F;code&gt;:  次のトークンを調べて、指定したトークンと一致するかどうか判定する。 &lt;code&gt;Cursor&lt;&#x2F;code&gt; は進めない&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;TokenStream&lt;&#x2F;code&gt; が空であることを確認できる &lt;code&gt;is_empty&lt;&#x2F;code&gt; メソッドを利用すれば以下のように実装できます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;syn::parse::Parse for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Args &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: syn::parse::ParseStream) -&amp;gt; syn::Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; args = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::default();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Cursor が全ての TokenStream を指し終わるまでループ処理を行う
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;!input.is_empty() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lookahead = input.lookahead1();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; name = expr
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; lookahead.peek(kw::name) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; NameValue(name) = input.parse()?;
&lt;&#x2F;span&gt;&lt;span&gt;                args.name = Some(name);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; skip(xxx, yyy)
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; lookahead.peek(kw::skip) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; Skips(skips) = input.parse()?;
&lt;&#x2F;span&gt;&lt;span&gt;                args.skips = skips
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; fields(key1=value1, key2=value2)
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; lookahead.peek(kw::fields) {
&lt;&#x2F;span&gt;&lt;span&gt;                args.fields = Some(input.parse()?);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 属性間の区切り記号 skip(xxx), &amp;lt;- こういう時に使うコンマ記号
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; lookahead.peek(Token![,]) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;_ = input.parse::&amp;lt;Token![,]&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(syn::Error::new(input.span(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;unexpected token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(args)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで以下のようにパースすれば処理は成功し、意図通りにパースした内容が出力されていることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tokens = quote! {
&lt;&#x2F;span&gt;&lt;span&gt;        name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        skip(form, state),
&lt;&#x2F;span&gt;&lt;span&gt;        fields(
&lt;&#x2F;span&gt;&lt;span&gt;            username=name,
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;syn::parse2::&amp;lt;Args&amp;gt;(tokens) {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(args) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;args - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, args.name);
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;skips - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, args.skips);
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;fields - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, args.fields);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Err(e) =&amp;gt; eprintln!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで複雑な属性が定義されている場合でもどのようにパースしているのか把握することができました。&lt;&#x2F;p&gt;
&lt;p&gt;事前に適用できる属性や構造体の設計を行なっていれば、そこまで複雑な処理にならずに実装できそうです。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gan-xiang&quot;&gt;感想&lt;&#x2F;h2&gt;
&lt;p&gt;これで proc-macro-workshop の Builder derive マクロ構築課題は完了です。課題を解いていく中で &lt;code&gt;tracing-attributes&lt;&#x2F;code&gt; や &lt;code&gt;thiserror&lt;&#x2F;code&gt; などの実装も見ていきましたが、終盤に近づくにつれてコードに対する理解度が向上して、サードパーティのクレートの実装もかなり読めるようになっていきました。&lt;&#x2F;p&gt;
&lt;p&gt;また、課題を進めていく中で &lt;code&gt;if-let&lt;&#x2F;code&gt; や &lt;code&gt;let-else&lt;&#x2F;code&gt; などの構文を利用すると、パターンマッチングの要領で型をどんどんアンラップしていく処理が非常に記述しやすく、型構造が一目瞭然なので可読性も良くなるなと感じました。&lt;&#x2F;p&gt;
&lt;p&gt;ただ自由度の高い &lt;code&gt;attribute&lt;&#x2F;code&gt; に関しては &lt;code&gt;parse&lt;&#x2F;code&gt; していくと複雑になっていってしまうなとも感じました。 &lt;code&gt;tracing-attribute&lt;&#x2F;code&gt; クレートの実装を参考にサンプルコードを書いていく中で、使用できる属性をしっかりと設計できている場合には、構造体にマッピングでいるためある程度複雑性を下げることもできると感じたので、こうしたマクロを実装する場合には事前の設計がかなり重要になると思います。&lt;&#x2F;p&gt;
&lt;p&gt;Builder 以外の課題や &lt;code&gt;trybuild&lt;&#x2F;code&gt; の使い方などに興味が出てきたので、また別の記事としてまとめようかなと思います。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>logクレートが提供する柔軟性の仕組みを探る</title>
          <pubDate>Fri, 02 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://shimopino.github.io/blog/logging-in-rust/</link>
          <guid>https://shimopino.github.io/blog/logging-in-rust/</guid>
          <description xml:base="https://shimopino.github.io/blog/logging-in-rust/">&lt;p&gt;Rust でアプリケーションを作成する際に &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing&#x2F;latest&#x2F;tracing&#x2F;&quot;&gt;&lt;code&gt;tracing&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; クレートを利用する場合も多くありますが、プロジェクトの初期段階や簡単な POC であればよりシンプルな &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;log&#x2F;latest&#x2F;log&#x2F;&quot;&gt;&lt;code&gt;log&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; クレートを利用する選択肢もあるかと思います。&lt;&#x2F;p&gt;
&lt;p&gt;本記事では &lt;code&gt;log&lt;&#x2F;code&gt; クレートの仕組みを追っていきながら、実装を提供している &lt;code&gt;simple_logger&lt;&#x2F;code&gt; クレートがどのように機能しているのか理解を深めていきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;0.4.18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;simple_logger &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;4.1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;log-kuretowoli-yong-sita-rust-deno-logging&quot;&gt;log クレートを利用した Rust での logging&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;log&lt;&#x2F;code&gt; クレートは、それ自体はロギングの実装を提供しておらず、Rust で標準的なロギングを行うための API となるトレイトを提供しています。そのため &lt;code&gt;log&lt;&#x2F;code&gt; クレートを利用してロギングを行う際には、実際の実装を提供するクレートと組み合わせる必要があります。&lt;&#x2F;p&gt;
&lt;p&gt;以下は実装を提供しているクレートの一部です。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;env_logger&#x2F;*&#x2F;env_logger&#x2F;&quot;&gt;&lt;code&gt;env_logger&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;fern&#x2F;*&#x2F;fern&#x2F;&quot;&gt;&lt;code&gt;fern&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tracing-log&#x2F;latest&#x2F;tracing_log&#x2F;&quot;&gt;&lt;code&gt;tracing-log&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;環境変数を利用して設定を行うことが可能な &lt;code&gt;env_logger&lt;&#x2F;code&gt; では、以下のようなコードを記述するだけでログを出力することが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    env_logger::init();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    log::info!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;後は環境変数を指定して実行するとログが出力されていることが確認できます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; RUST_LOG=info cargo run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;[2023-05-27T09:50:55Z&lt;&#x2F;span&gt;&lt;span&gt; INFO  log] hello
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これだけだと内部でどのような処理を実現しているのかを推察することが難しいため、公式ドキュメントに記載されている自作ロガーのコードも確認します。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zi-zuo-roganoshi-zhuang-woque-ren-suru&quot;&gt;自作ロガーの実装を確認する&lt;&#x2F;h2&gt;
&lt;p&gt;公式ドキュメントのサンプルでは &lt;code&gt;Log&lt;&#x2F;code&gt; トレイトの実装として以下がが提供されています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;SimpleLogger&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;log::Log for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;SimpleLogger &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;log::Metadata) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, metadata);
&lt;&#x2F;span&gt;&lt;span&gt;        metadata.level() &amp;lt;= Level::Info
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;record&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;log::Record) {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, record);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.enabled(record.metadata()) {
&lt;&#x2F;span&gt;&lt;span&gt;            println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, record.level(), record.args());
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;そしてこの実装を呼び出す時には以下のように &lt;code&gt;set_logger&lt;&#x2F;code&gt; 関数を呼び出してグローバルに適用するロガーを登録し、ログレベルを設定して出力されるログを制御するようにしています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; SimpleLoggerはフィールドを持たないユニット構造体である
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 型の名前自体が唯一の値となるため、単に SimpleLogger と記述すればインスタンスを作成できる
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; フィールドを有する場合には、そのフィールドを初期化する必要がある
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;LOGGER&lt;&#x2F;span&gt;&lt;span&gt;: SimpleLogger = SimpleLogger;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    log::set_logger(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;LOGGER&lt;&#x2F;span&gt;&lt;span&gt;).unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;    log::set_max_level(LevelFilter::Info);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    log::trace!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;trace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    log::debug!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    log::info!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    log::warn!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    log::error!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この場合であれば最大のログレベルに &lt;code&gt;Info&lt;&#x2F;code&gt; を設定しているため、&lt;code&gt;debug!&lt;&#x2F;code&gt; マクロや &lt;code&gt;trace!&lt;&#x2F;code&gt; マクロはメッセージを出力されないようになっています。&lt;&#x2F;p&gt;
&lt;p&gt;これからは &lt;code&gt;log&lt;&#x2F;code&gt; クレートが提供している下記の機能の詳細を見ていきます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Log&lt;&#x2F;code&gt; トレイト&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;set_logger&lt;&#x2F;code&gt; 関数&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;set_max_level&lt;&#x2F;code&gt; 関数&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;log-toreito&quot;&gt;Log トレイト&lt;&#x2F;h2&gt;
&lt;p&gt;ログの実装を行うためには &lt;code&gt;log&lt;&#x2F;code&gt; クレートが提供している &lt;code&gt;Log&lt;&#x2F;code&gt; トレイトを実装することで、各マクロを実行したときのログ出力の挙動を制御する必要があります。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Log&lt;&#x2F;code&gt; トレイトは以下のように定義されています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;: Sync + Send {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Metadata&amp;lt;&amp;#39;_&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;record&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Record&amp;lt;&amp;#39;_&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;502bdb7c63ffcbad4fe6921b46d582074e49fd0a&#x2F;src&#x2F;lib.rs#L1124C1-L1150&quot;&gt;Log trait | log crate&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;この定義を 1 つ 1 つ見ていきます。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pub-trait-log-sync-send&quot;&gt;&lt;code&gt;pub trait Log: Sync + Send&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;まずは &lt;code&gt;Log&lt;&#x2F;code&gt; トレイトのトレイト境界に設定されているマーカートレイトである &lt;code&gt;Send&lt;&#x2F;code&gt; トレイトと &lt;code&gt;Sync&lt;&#x2F;code&gt; トレイトを振り返ります。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Send&lt;&#x2F;code&gt; トレイト
&lt;ul&gt;
&lt;li&gt;実装した型の所有権をスレッド間で転送できることを表す&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Sync&lt;&#x2F;code&gt; トレイト
&lt;ul&gt;
&lt;li&gt;複数のスレッドから参照されても安全であることを表す&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;Log&lt;&#x2F;code&gt; トレイトを実装する全ての型は、スレッド間で安全に転送でき、スレッド間で安全に参照を共有することを保証する必要があります。&lt;&#x2F;p&gt;
&lt;p&gt;例えばマルチスレッドでリクエストを処理するような Web サーバーの利用を考えると、各スレッドからは &lt;code&gt;Log&lt;&#x2F;code&gt; トレイトを実装したオブジェクトにアクセスできる必要があります。 &lt;code&gt;Sync&lt;&#x2F;code&gt; トレイトが実装されていれば、複数のスレッドから同時に安全にアクセスできることが保証されます。&lt;&#x2F;p&gt;
&lt;p&gt;実際には &lt;code&gt;Send&lt;&#x2F;code&gt; トレイトと &lt;code&gt;Send&lt;&#x2F;code&gt; トレイトから構成される型は自動的にこれらのトレイトを実装するので、手動で実装する必要はありません。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fn-enabled-self-metadata-metadata-bool&quot;&gt;&lt;code&gt;fn enabled(&amp;amp;self, metadata: &amp;amp;Metadata&amp;lt;&#x27;_&amp;gt;) -&amp;gt; bool;&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;このメソッドを実行することで、以下の構造体で定義されているメタデータを含むログメッセージを記録するかどうかを判定します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;: Level,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;level&lt;&#x2F;code&gt; にはそれぞれログ出力時に呼び出したマクロに対するログレベルが設定されており、この値とグローバルに設定されたログレベルなどの比較を行い、ログを出力するのかどうかを判定することが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Log &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;log::Metadata) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 必ずInfoレベル以上のログを出力しないように設定している
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 基本的にはグローバルで設定したものをキャプチャしてフィルタリングを行う
&lt;&#x2F;span&gt;&lt;span&gt;      metadata.level() &amp;lt;= Level::Info
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;target&lt;&#x2F;code&gt; にはマクロを呼び出す際にオプションとして設定することが可能であり、例えばライブラリやアプリケーションの名前を設定することで、ログメッセージがどのモジュールから生成されたものを追跡できるようになっています。&lt;&#x2F;p&gt;
&lt;p&gt;例えば以下のようにエラーメッセージを出力すると、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この場合は設定したログレベルとターゲット情報をもとに &lt;code&gt;Metadata&lt;&#x2F;code&gt; が生成されていることがわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;Metadata { level: Error, target: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;まとめるとこのメソッドは、ログ出力時に呼び出したマクロのログレベルをキャプチャして、条件に基づいてログを出力するかどうかを決めることが可能なメソッドです。&lt;&#x2F;p&gt;
&lt;p&gt;またこのメソッドを呼び出すことが可能な &lt;code&gt;log_enabled!&lt;&#x2F;code&gt; マクロも用意されており、ログ出力時に重い計算が必要になる箇所ではこのマクロを利用することで出力する必要のない処理は実行しないように制御することが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;log_enabled!(log::Level::Debug) {
&lt;&#x2F;span&gt;&lt;span&gt;    log::info!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, expensive_call());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fn-log-self-record-log-record&quot;&gt;&lt;code&gt;fn log(&amp;amp;self, record: &amp;amp;log::Record)&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;このメソッドを実行することでログメッセージのフォーマットなどを制御することが可能であり、 &lt;code&gt;enabled&lt;&#x2F;code&gt; メソッドを呼び出してログの出力可否を細かく制御することも可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;record&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;log::Record) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.enabled(record.metadata()) {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, record.level(), record.args());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;このメソッドは、各マクロを呼び出した時に以下で定義されている &lt;code&gt;Record&lt;&#x2F;code&gt; を受け取り、ログマクロが実行されたときの情報を抽出します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Record&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;: Metadata&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: fmt::Arguments&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;module_path&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;MaybeStaticStr&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;MaybeStaticStr&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(feature = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;kv_unstable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;key_values&lt;&#x2F;span&gt;&lt;span&gt;: KeyValues&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ログマクロを実行したときに内部でこのレコードが生成され、指定したメッセージやマクロを呼び出した行数、実行したときのファイル名などが格納されています。&lt;&#x2F;p&gt;
&lt;p&gt;例えば以下のようにエラーメッセージを出力すると、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;このときメタデータが格納されたレコードが生成され、Rust の標準ライブラリから提供されている &lt;code&gt;line!&lt;&#x2F;code&gt; マクロや &lt;code&gt;file!&lt;&#x2F;code&gt; マクロを呼び出した値で初期化を行っています。（今回は検証のために作成したリポジトリ内で &lt;code&gt;examples&lt;&#x2F;code&gt; ディレクトリを作成して処理を実行させています。 ）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;Record {
&lt;&#x2F;span&gt;&lt;span&gt;  metadata: Metadata { level: Error, target: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  args: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  module_path: Some(Static(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;  file: Some(Static(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;examples&#x2F;log&#x2F;main.rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;  line: Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;macros.rs#L245-L267&quot;&gt;macros | log crate&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;他のクレートではこのメソッドの中でタイムスタンプなどのフォーマットを行なっています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fn-flush-self&quot;&gt;&lt;code&gt;fn flush(&amp;amp;self);&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;標準出力にメッセージを出すだけの場合にはあまり使うことはないかもしれませんが、ログメッセージをファイルに出力したりする場合など利用します。&lt;&#x2F;p&gt;
&lt;p&gt;例えば &lt;code&gt;std::io::Write&lt;&#x2F;code&gt; トレイトでも &lt;code&gt;flush&lt;&#x2F;code&gt; メソッドは提供されており、以下のようにファイルを生成して書き込む内容を指定した後で、 &lt;code&gt;flush&lt;&#x2F;code&gt; を呼び出すことでバッファに書き込まれた内容をファイルに反映しています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    let mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;buffer &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;BufWriter&lt;&#x2F;span&gt;&lt;span&gt;::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;foo.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)?);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;some bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Log&lt;&#x2F;code&gt; トレイトに限らず、 &lt;code&gt;flush&lt;&#x2F;code&gt; メソッドは上記のように、パフォーマンス向上のためにデータをメモリ上に保存して、一定の条件や任意のタイミングで永続的なストレージに書き出す時などで利用されています。&lt;&#x2F;p&gt;
&lt;p&gt;他のクレートを例にとると、 &lt;code&gt;fern&lt;&#x2F;code&gt; クレートでは、出力先に応じてそれぞれ対応する &lt;code&gt;flush&lt;&#x2F;code&gt; メソッドを呼び出すことで、ファイルやチャンネルに対してメッセージを書き出す挙動を制御しています。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;daboross&#x2F;fern&#x2F;blob&#x2F;4f45ef9aac6c4d5929f100f756b5f4fea92794a6&#x2F;src&#x2F;log_impl.rs#L378-L407&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;daboross&#x2F;fern&#x2F;blob&#x2F;4f45ef9aac6c4d5929f100f756b5f4fea92794a6&#x2F;src&#x2F;log_impl.rs#L378-L407&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ge-zhong-guan-shu&quot;&gt;各種関数&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;fn-set-logger-logger-static-dyn-log-result-setloggererror&quot;&gt;&lt;code&gt;fn set_logger(logger: &amp;amp;&#x27;static dyn Log) -&amp;gt; Result&amp;lt;(), SetLoggerError&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;このメソッドを利用することで、アプリケーション内でグローバルに宣言されているロガーを設定することができ、このメソッドを呼び出して初めてログの出力が可能となります。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;log&#x2F;latest&#x2F;log&#x2F;fn.set_logger.html&quot;&gt;set_logger | log crate&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;このメソッドを呼び出さない場合には、マクロを実行した時には &lt;code&gt;NopLogger&lt;&#x2F;code&gt; という空の実装が用意されているメソッドが実行されます。&lt;&#x2F;p&gt;
&lt;p&gt;処理の流れとしてはまず &lt;code&gt;info!&lt;&#x2F;code&gt; マクロを呼び出した時に、内部では &lt;code&gt;__private_api_log&lt;&#x2F;code&gt; 関数を呼び出しており、この中の &lt;code&gt;logger&lt;&#x2F;code&gt; 関数内部でロガーの初期化が実行されたかどうかを判定しています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 各種ログマクロを実行した時に呼び出されている関数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;__private_api_log&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: fmt::Arguments,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;: Level,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;amp;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;module_path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;): &amp;amp;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;static str&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;static str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;kvs&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&amp;amp;[(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;)]&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; kvs.is_some() {
&lt;&#x2F;span&gt;&lt;span&gt;        panic!(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;key-value support is experimental and must be enabled using the `kv_unstable` feature&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; この logger 関数内部でどのログ実装を使用するのかを判断する
&lt;&#x2F;span&gt;&lt;span&gt;    logger().log(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Record に関しては Builder パターンを使用してオブジェクトの生成を行っている
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;amp;Record::builder()
&lt;&#x2F;span&gt;&lt;span&gt;            .args(args)
&lt;&#x2F;span&gt;&lt;span&gt;            .level(level)
&lt;&#x2F;span&gt;&lt;span&gt;            .target(target)
&lt;&#x2F;span&gt;&lt;span&gt;            .module_path_static(Some(module_path))
&lt;&#x2F;span&gt;&lt;span&gt;            .file_static(Some(file))
&lt;&#x2F;span&gt;&lt;span&gt;            .line(Some(line))
&lt;&#x2F;span&gt;&lt;span&gt;            .build(),
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;f4c21c1b2dc958799eb6b3e8e713d1133862238a&#x2F;src&#x2F;lib.rs#L1468-L1490&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;f4c21c1b2dc958799eb6b3e8e713d1133862238a&#x2F;src&#x2F;lib.rs#L1468-L1490&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;実際に &lt;code&gt;logger&lt;&#x2F;code&gt; 関数の内容を確認すると以下のように &lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; で管理している状態を取得し、初期化されたかどうかを判定させた後に実際に利用するロガーの判断を行なっています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ロガーの設定状態を管理する変数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;STATE&lt;&#x2F;span&gt;&lt;span&gt;: AtomicUsize = AtomicUsize::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 初期値は UNINITIALIZED
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;UNINITIALIZED&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;INITIALIZING&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;INITIALIZED&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; グローバルに宣言されたロガーへのポイントを保持する
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; AtomicUsizeで宣言された STATE により初期化されたかどうかを判定している
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; NopLoggerは何もプロパティが設定されていないため、そのまま型を指定してグローバルに宣言することが可能である
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;static mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;LOGGER&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;dyn Log = &amp;amp;NopLogger;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt; dyn Log {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ロガーを初期化していない場合はデフォルトの実装として NopLogger が採用される
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;STATE&lt;&#x2F;span&gt;&lt;span&gt;.load(Ordering::SeqCst) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;INITIALIZED &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;NOP&lt;&#x2F;span&gt;&lt;span&gt;: NopLogger = NopLogger;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;NOP
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;LOGGER &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;f4c21c1b2dc958799eb6b3e8e713d1133862238a&#x2F;src&#x2F;lib.rs#LL1348C1-L1350C2&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;f4c21c1b2dc958799eb6b3e8e713d1133862238a&#x2F;src&#x2F;lib.rs#LL1348C1-L1350C2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; はマルチスレッド環境でのデータ一貫性を担保するために設計された型であり、複数のスレッドからでも値を安全に操作することが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;atomic&#x2F;struct.AtomicUsize.html&quot;&gt;AtomicUsize | std crate&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ログ出力を行う際はマルチスレッド環境からでもロガーを呼び出す可能性はあるため、アトミックな操作でロガーが初期化されたかどうかを判定することで、どのログを利用するかの判断を安全に行っています。&lt;&#x2F;p&gt;
&lt;p&gt;（ただ、正直なところアトミック操作やメモリ順序への理解度は怪しいので「Rust Atomics and Locks」を読みたい。）&lt;&#x2F;p&gt;
&lt;p&gt;ここで &lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; を初期化状態の管理で使用しているのは、ロガーの定義が &lt;code&gt;static&lt;&#x2F;code&gt; なライフタイムを有している可変参照として定義されているからです。&lt;&#x2F;p&gt;
&lt;p&gt;可変参照であるためそのまま利用してしまうと、複数のスレッドからロガーの初期化が呼び出されてしまった場合、 &lt;code&gt;LOGGER&lt;&#x2F;code&gt; に対して同時アクセスを行いデータ競合が発生してしまう可能性があります。そのため &lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; を利用して初期化が一度だけ安全に行われることを保証するためにこのような設計になっているのだと推察しています。&lt;&#x2F;p&gt;
&lt;p&gt;次に &lt;code&gt;set_logger&lt;&#x2F;code&gt; メソッドが内部でどのように初期化を行っているのかを確認します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; この関数でグローバルに宣言されたロガーを受け取って、static mutな変数を変更する
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;set_logger&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt; dyn Log) -&amp;gt; Result&amp;lt;(), SetLoggerError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    set_logger_inner(|| logger)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; この内部でロガーを変更するが、AtomicUsizeを利用することで安全に上書きするようにしている
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;set_logger_inner&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;make_logger&lt;&#x2F;span&gt;&lt;span&gt;: F) -&amp;gt; Result&amp;lt;(), SetLoggerError&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    F: FnOnce() -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt; dyn Log,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; old_state = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;STATE&lt;&#x2F;span&gt;&lt;span&gt;.compare_exchange(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;UNINITIALIZED&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 現在の値が第１引数と等しい場合に
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;INITIALIZING&lt;&#x2F;span&gt;&lt;span&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 現在の値を第２引数で指定した値に交換する
&lt;&#x2F;span&gt;&lt;span&gt;        Ordering::SeqCst,
&lt;&#x2F;span&gt;&lt;span&gt;        Ordering::SeqCst,
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(s) | Err(s) =&amp;gt; s,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; old_state {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;UNINITIALIZED &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;LOGGER &lt;&#x2F;span&gt;&lt;span&gt;= make_logger();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;STATE&lt;&#x2F;span&gt;&lt;span&gt;.store(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;INITIALIZED&lt;&#x2F;span&gt;&lt;span&gt;, Ordering::SeqCst);
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;INITIALIZING &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;STATE&lt;&#x2F;span&gt;&lt;span&gt;.load(Ordering::SeqCst) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;INITIALIZING &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; TODO: replace with `hint::spin_loop` once MSRV is 1.49.0.
&lt;&#x2F;span&gt;&lt;span&gt;                #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(deprecated)]
&lt;&#x2F;span&gt;&lt;span&gt;                std::sync::atomic::spin_loop_hint();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Err(SetLoggerError(()))
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        _ =&amp;gt; Err(SetLoggerError(())),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#L1352-L1382&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#L1352-L1382&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; が提供する &lt;code&gt;compare_exchange&lt;&#x2F;code&gt; は、現在の値と第 1 引数で指定された値と比較して、同じ値の場合には第 2 引数で指定した値に置き換えます。そして、関数の返り値に置き換え前の現在の値を返却します。&lt;&#x2F;p&gt;
&lt;p&gt;この状態の変更に関しては &lt;code&gt;Ordering::SeqCst&lt;&#x2F;code&gt; が指定されているため、必ず 1 度に 1 つのスレッドのみがアトミックに状態を &lt;code&gt;INITIALIZING&lt;&#x2F;code&gt; という初期化中であることを示す状態に変更することになります。&lt;&#x2F;p&gt;
&lt;p&gt;もしもあるスレッドがログ設定を行なっている間に、他のスレッドがログ設定の関数を呼び出した場合には &lt;code&gt;old_state&lt;&#x2F;code&gt; に &lt;code&gt;INITIALIZING&lt;&#x2F;code&gt; が返却され、後続の処理でスピンループを行うことでそのスレッドでの初期化設定が完了するまで待機し、そのあとでエラーを返却しています。&lt;&#x2F;p&gt;
&lt;p&gt;このような初期化処理を実現することで、グローバルにロガー設定が 1 度のみしか呼出されないことを保証しています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fn-set-max-level-level-levelfilter&quot;&gt;&lt;code&gt;fn set_max_level(level: LevelFilter)&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;info!&lt;&#x2F;code&gt; マクロを呼び出せば、自動的にログレベル &lt;code&gt;Info&lt;&#x2F;code&gt; が設定された &lt;code&gt;Metadata&lt;&#x2F;code&gt; がログレコードに付与された状態になりますが、これだけだと全てのログメッセージが表示されてしまいます。&lt;&#x2F;p&gt;
&lt;p&gt;そこで &lt;code&gt;log&lt;&#x2F;code&gt; クレートは &lt;code&gt;set_max_level&lt;&#x2F;code&gt; というログの出力を調整するための関数を用意しています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ログレベルに関してもグローバルなアトミックの設定を有している
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;MAX_LOG_LEVEL_FILTER&lt;&#x2F;span&gt;&lt;span&gt;: AtomicUsize = AtomicUsize::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;set_max_level&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;: LevelFilter) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;MAX_LOG_LEVEL_FILTER&lt;&#x2F;span&gt;&lt;span&gt;.store(level as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, Ordering::Relaxed);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#LL1220C1-L1222C2&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#LL1220C1-L1222C2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ここで &lt;code&gt;Ordering::Relaxed&lt;&#x2F;code&gt; を設定して制約を緩めている背景は以下の ISSUE で言及されている通り、現在設定されている最大のログレベルを取得する箇所が &lt;code&gt;Ordering::Relaxed&lt;&#x2F;code&gt; を設定しているためです。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;issues&#x2F;453&quot;&gt;Confusing memory orderings for MAX_LOG_LEVEL_FILTER&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;他のライブラリでは、このメソッドは &lt;code&gt;Log&lt;&#x2F;code&gt; トレイトの実装を行なったロガーの初期化を行うメソッドの内部で利用されていることが多い印象です。&lt;&#x2F;p&gt;
&lt;p&gt;例えば &lt;code&gt;simple_logger&lt;&#x2F;code&gt; の場合であれば、以下のようなロガーを生成する処理の中でログレベルを設定し、そのメソッド内部で &lt;code&gt;set_max_level&lt;&#x2F;code&gt; を呼び出すようにしており、 &lt;code&gt;log&lt;&#x2F;code&gt; クレートが提供するAPIの抽象化を行なっています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;simple_logger::init_with_level(log::Level::Warn).unwrap();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで設定したログレベルを、どのように管理して、ログの出力判断を行う &lt;code&gt;enabled&lt;&#x2F;code&gt; でどのように使用しているのかは、それぞれライブラリの実装によって異なっています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fn-set-boxed-logger-logger-box-dyn-log-result-setloggererror&quot;&gt;&lt;code&gt;fn set_boxed_logger(logger: Box&amp;lt;dyn Log&amp;gt;) -&amp;gt; Result&amp;lt;(), SetLoggerError&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;set_logger&lt;&#x2F;code&gt; 関数では &lt;code&gt;&amp;amp;&#x27;static dyn Log&lt;&#x2F;code&gt; 型を引数に取る都合上、 &lt;code&gt;Log&lt;&#x2F;code&gt; トレイトを実装したロガーは、プログラムの実行全体にわたって有効なものでないといけません。&lt;&#x2F;p&gt;
&lt;p&gt;そのため公式ドキュメントのサンプルでは、初期化を行う際に &lt;code&gt;static&lt;&#x2F;code&gt; でロガーを宣言するようにしていました。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;SimpleLogger&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;log::Log for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;SimpleLogger &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;LOGGER&lt;&#x2F;span&gt;&lt;span&gt;: SimpleLogger = SimpleLogger;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    log::set_logger(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;LOGGER&lt;&#x2F;span&gt;&lt;span&gt;).unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;このように記述できるのは &lt;code&gt;SimpleLogger&lt;&#x2F;code&gt; がフィールドを持たないユニット構造体であり、その型の名前自体が唯一の値となるため &lt;code&gt;SimpleLogger&lt;&#x2F;code&gt; とだけ定義すればインスタンスを作成できるからです。&lt;&#x2F;p&gt;
&lt;p&gt;しかし、他のライブラリのようにロガーに対して各種設定を制御するためにフィールドを追加すると、他の方法でロガーを初期化して &lt;code&gt;static&lt;&#x2F;code&gt; な参照を取得する必要があります。&lt;&#x2F;p&gt;
&lt;p&gt;そのような場合に利用できるのは &lt;code&gt;set_boxed_logger&lt;&#x2F;code&gt; 関数です。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;log&#x2F;latest&#x2F;log&#x2F;fn.set_boxed_logger.html&quot;&gt;set_boxed_logger | log crate&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;これは内部的には &lt;code&gt;set_logger&lt;&#x2F;code&gt; 関数と同様に  &lt;code&gt;set_logger_inner&lt;&#x2F;code&gt; 関数を呼び出しているだけですが、関数の引数と指定しているクロージャーの処理が異なっています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;set_boxed_logger&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;dyn Log&amp;gt;) -&amp;gt; Result&amp;lt;(), SetLoggerError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    set_logger_inner(|| Box::leak(logger))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで使用している &lt;code&gt;Box::leak&lt;&#x2F;code&gt; メソッドは、&lt;code&gt;Box&lt;&#x2F;code&gt; を使用してヒープ上に確保されたメモリを、明示的にリークさせることでそのメモリをプログラム終了時まで保持させることのできるメソッドです。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;boxed&#x2F;struct.Box.html#method.leak&quot;&gt;Box::leak&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;このメソッドを実行することで &lt;code&gt;logger&lt;&#x2F;code&gt; をプログラム終了までヒープ上に保持させるようにし、その結果このメソッドから返却されるものは &lt;code&gt;&amp;amp;&#x27;static mut Log&lt;&#x2F;code&gt; の参照となり、エラーが発生することなくコンパイルすることが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;この &lt;code&gt;set_boxed_logger&lt;&#x2F;code&gt; を利用することで、 &lt;code&gt;static&lt;&#x2F;code&gt; な値で初期化することなく、以下のように特定のスコープ内で生成されたロガーをグローバルな変数として登録することができます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; simple_loggerの例
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Box::leakを活用することで関数内で生成したロガーを static に登録できる
&lt;&#x2F;span&gt;&lt;span&gt;    SimpleLogger::new().init().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    log::warn!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;This is an example message.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fn-set-max-level-level-levelfilter-1&quot;&gt;&lt;code&gt;fn set_max_level(level: LevelFilter)&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;log&lt;&#x2F;code&gt; クレートではグローバルに最大のログレベルを設定することのできる関数 &lt;code&gt;set_max_logger&lt;&#x2F;code&gt; が提供されている。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;log&#x2F;latest&#x2F;log&#x2F;fn.set_max_level.html&quot;&gt;set_max_logger | log crate&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;この関数を通して設定されたログレベルを &lt;code&gt;info!&lt;&#x2F;code&gt; などの各種マクロを実行した際に参照し、ログ出力を行うかどうかを判断しています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; log!(target: &amp;quot;my_target&amp;quot;, Level::Info, &amp;quot;a {} event&amp;quot;, &amp;quot;log&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;(target: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$target&lt;&#x2F;span&gt;&lt;span&gt;:expr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$lvl&lt;&#x2F;span&gt;&lt;span&gt;:expr, $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$arg&lt;&#x2F;span&gt;&lt;span&gt;:tt)+) =&amp;gt; ({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lvl = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$lvl&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ここでコンパイル時に設定したログレベルと、関数を通して設定したログレベルを参照し
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 対象するログメッセージのログレベルとの比較を行い出力判断を行なっている
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; lvl &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$crate&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;STATIC_MAX_LEVEL &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; lvl &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$crate&lt;&#x2F;span&gt;&lt;span&gt;::max_level() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$crate&lt;&#x2F;span&gt;&lt;span&gt;::__private_api_log(
&lt;&#x2F;span&gt;&lt;span&gt;            __log_format_args!($(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$arg&lt;&#x2F;span&gt;&lt;span&gt;)+),
&lt;&#x2F;span&gt;&lt;span&gt;            lvl,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;amp;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$target&lt;&#x2F;span&gt;&lt;span&gt;, __log_module_path!(), __log_file!(), __log_line!()),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$crate&lt;&#x2F;span&gt;&lt;span&gt;::__private_api::Option::None,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;macros.rs#L45-L56&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;macros.rs#L45-L56&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;この処理の中では以下の 2 つのログレベルを参照している。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;STATIC_MAX_LEVEL&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;コンパイル時に指定したフラグで制御された最大のログレベル&lt;&#x2F;li&gt;
&lt;li&gt;リリースビルド時に出力したいログを制御するときに利用する&lt;&#x2F;li&gt;
&lt;li&gt;デフォルトでは &lt;code&gt;LevelFilter::Trace&lt;&#x2F;code&gt; が設定されている&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#L1586&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#L1586&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;max_level()&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;プログラム側で設定する最大のログレベル&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;set_max_level&lt;&#x2F;code&gt; 関数を通して制御する&lt;&#x2F;li&gt;
&lt;li&gt;デフォルトでは &lt;code&gt;LevelFilter::Off&lt;&#x2F;code&gt; が設定されている（つまり、何もログ出力しない）&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#L408&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#L408&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;log&lt;&#x2F;code&gt; クレートでは、ログレベルとして以下の &lt;code&gt;Enum&lt;&#x2F;code&gt; を定義しており、各マクロに対応するログレベルと、全てのログを出力しないレベルに設定された &lt;code&gt;Off&lt;&#x2F;code&gt; のログレベルが定義されており、この &lt;code&gt;Off&lt;&#x2F;code&gt; ログレベルが初期値として設定されています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;MAX_LOG_LEVEL_FILTER&lt;&#x2F;span&gt;&lt;span&gt;: AtomicUsize = AtomicUsize::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;LevelFilter &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; A level lower than all log levels.
&lt;&#x2F;span&gt;&lt;span&gt;    Off,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; Corresponds to the `Error` log level.
&lt;&#x2F;span&gt;&lt;span&gt;    Error,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; Corresponds to the `Warn` log level.
&lt;&#x2F;span&gt;&lt;span&gt;    Warn,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; Corresponds to the `Info` log level.
&lt;&#x2F;span&gt;&lt;span&gt;    Info,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; Corresponds to the `Debug` log level.
&lt;&#x2F;span&gt;&lt;span&gt;    Debug,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F;&#x2F; Corresponds to the `Trace` log level.
&lt;&#x2F;span&gt;&lt;span&gt;    Trace,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#LL552C1-L567C2&quot;&gt;LevelFilter | log crate&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;つまり関数を使用してこのログレベルを変更しなければ、デフォルトでは全てのログ出力は抑制されてしまいます。&lt;&#x2F;p&gt;
&lt;p&gt;最大のログレベルを調整するための関数は以下のように定義されています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#LL1265C1-L1273C2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;max_level&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; LevelFilter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ mem::transmute(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;MAX_LOG_LEVEL_FILTER&lt;&#x2F;span&gt;&lt;span&gt;.load(Ordering::Relaxed)) }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#LL1220C1-L1222C2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;set_max_level&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;: LevelFilter) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;MAX_LOG_LEVEL_FILTER&lt;&#x2F;span&gt;&lt;span&gt;.store(level as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, Ordering::Relaxed);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;std::mem::transmute&lt;&#x2F;code&gt; は非常に危険な関数ではあるが、ある型から別の型へのビット単位の移動行うため、引数で指定した値から返り値で指定した型に対してビットをコピーします。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;log&lt;&#x2F;code&gt; クレートの場合ではマルチスレッドでログレベルの変更を管理するために &lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; を利用しているため、ログレベルを定義している &lt;code&gt;LevelFilter&lt;&#x2F;code&gt; と &lt;code&gt;usize&lt;&#x2F;code&gt; で型が異なっています。関数のインターフェースレベルでは &lt;code&gt;LevelFilter&lt;&#x2F;code&gt; を表に出しているため、 &lt;code&gt;LevelFilter&lt;&#x2F;code&gt; をアトミックに更新するための裏技的なやり方です。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;match&lt;&#x2F;code&gt; 式などを利用してより安全に型変換を行う方法もありますが、どの値にも該当しない &lt;code&gt;exhaustive patterns&lt;&#x2F;code&gt; をどのように取り扱うのか、であったり単純なビット移動である &lt;code&gt;transmute&lt;&#x2F;code&gt; の方がパフォーマンスが良い、という理由で現状のコードになっている可能性はあります。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-jp.rs&#x2F;rust-nomicon-ja&#x2F;transmutes.html&quot;&gt;トランスミュート transmute&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;log-toreitonoshi-zhuang-woti-gong-siteirukureto&quot;&gt;log トレイトの実装を提供しているクレート&lt;&#x2F;h2&gt;
&lt;p&gt;ここからはクレートがどのように &lt;code&gt;Log&lt;&#x2F;code&gt; トレイを実装しているのかを見ていきます。&lt;&#x2F;p&gt;
&lt;p&gt;よく利用されているであろうクレートは、例えば以下のようなものだと思いますが、今回は &lt;code&gt;simple_logger&lt;&#x2F;code&gt; を対象にします。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;simple_logger&quot;&gt;simple_logger&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;env_logger&#x2F;&quot;&gt;env_logger&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;fern&quot;&gt;fern&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;simple-logger&quot;&gt;simple_logger&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;chu-qi-hua-yong-noguan-shu&quot;&gt;初期化用の関数&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;simple_logger&quot;&gt;&lt;code&gt;simple_logger&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; はロガーの設定や出力メッセージがとてもシンプルで使いやすいクレートであり、本体のコードも &lt;code&gt;lib.rs&lt;&#x2F;code&gt; のみで構成されているため &lt;code&gt;Log&lt;&#x2F;code&gt; トレイトの実装例確認の最初の一歩に適しています。&lt;&#x2F;p&gt;
&lt;p&gt;公式から提供されている Getting Started なコードを確認すると、提供されているメソッドの中で、今まで説明してきた &lt;code&gt;set_boxed_logger&lt;&#x2F;code&gt; によるグローバルなロガーの宣言や &lt;code&gt;set_max_level&lt;&#x2F;code&gt; での最大ログレベルの設定を行なっていることが想像できます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;use simple_logger::SimpleLogger;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    SimpleLogger::new().init().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    log::warn!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;This is an example message.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで以下のようにログメッセージが表示されます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;2023-05-30T11:49:38.789Z&lt;&#x2F;span&gt;&lt;span&gt; WARN  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;simple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; This is an example message.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;このクレートでは関連関数を使用していることからわかるように &lt;code&gt;SimpleLogger&lt;&#x2F;code&gt; のインスタンス生成と設定適用の関数をそれぞれ役割に分けて分離させています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;SimpleLogger &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;must_use &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;You must call init() to begin logging&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; SimpleLogger {
&lt;&#x2F;span&gt;&lt;span&gt;        SimpleLogger {
&lt;&#x2F;span&gt;&lt;span&gt;            default_level: LevelFilter::Trace,
&lt;&#x2F;span&gt;&lt;span&gt;            module_levels: Vec::new(),
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; 各フィーチャーフラグで有効化させるプロパティ
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;borntyping&#x2F;rust-simple_logger&#x2F;blob&#x2F;3a78bcf7ab4f4b594c0b55290afe42a50b6a295f&#x2F;src&#x2F;lib.rs#LL105C1-L123C6&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;borntyping&#x2F;rust-simple_logger&#x2F;blob&#x2F;3a78bcf7ab4f4b594c0b55290afe42a50b6a295f&#x2F;src&#x2F;lib.rs#LL105C1-L123C6&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ここでは &lt;code&gt;#[must_use]&lt;&#x2F;code&gt; 属性を利用することで以下のようにロガー設定を行うための &lt;code&gt;init&lt;&#x2F;code&gt; 関数を呼び出していない場合には警告を発するようになっています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; warningが発生する
&lt;&#x2F;span&gt;&lt;span&gt;    SimpleLogger::new();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), SetLoggerError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.module_levels
&lt;&#x2F;span&gt;&lt;span&gt;        .sort_by_key(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_level&lt;&#x2F;span&gt;&lt;span&gt;)| name.len().wrapping_neg());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; max_level = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.module_levels.iter().map(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;)| level).copied().max();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; max_level = max_level
&lt;&#x2F;span&gt;&lt;span&gt;        .map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lvl&lt;&#x2F;span&gt;&lt;span&gt;| lvl.max(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.default_level))
&lt;&#x2F;span&gt;&lt;span&gt;        .unwrap_or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.default_level);
&lt;&#x2F;span&gt;&lt;span&gt;    log::set_max_level(max_level);
&lt;&#x2F;span&gt;&lt;span&gt;    log::set_boxed_logger(Box::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;))?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;borntyping&#x2F;rust-simple_logger&#x2F;blob&#x2F;3a78bcf7ab4f4b594c0b55290afe42a50b6a295f&#x2F;src&#x2F;lib.rs#LL347C1-L363C6&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;borntyping&#x2F;rust-simple_logger&#x2F;blob&#x2F;3a78bcf7ab4f4b594c0b55290afe42a50b6a295f&#x2F;src&#x2F;lib.rs#LL347C1-L363C6&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;この &lt;code&gt;init&lt;&#x2F;code&gt; 関数で最大のログレベルの設定やロガーのグローバルな値として登録を行なっていマス。また最大のログレベルは &lt;code&gt;module_levels&lt;&#x2F;code&gt; を調整するか &lt;code&gt;default_level&lt;&#x2F;code&gt; を調整する 2 つの方法があることがわかり、それぞれ &lt;code&gt;SimpleLogger&lt;&#x2F;code&gt; が提供している &lt;code&gt;with_module_level&lt;&#x2F;code&gt; 関数や &lt;code&gt;with_level&lt;&#x2F;code&gt; 関数を通して制御することが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;SimpleLogger&lt;&#x2F;code&gt; では &lt;code&gt;env_logger&lt;&#x2F;code&gt; の挙動を模倣させ環境変数からも最大のログレベルを設定することが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;must_use &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;You must call init() to begin logging&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; SimpleLogger {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.default_level = std::env::var(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;RUST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .ok()
&lt;&#x2F;span&gt;&lt;span&gt;        .as_deref()
&lt;&#x2F;span&gt;&lt;span&gt;        .map(log::LevelFilter::from_str)
&lt;&#x2F;span&gt;&lt;span&gt;        .and_then(Result::ok)
&lt;&#x2F;span&gt;&lt;span&gt;        .unwrap_or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.default_level);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;borntyping&#x2F;rust-simple_logger&#x2F;blob&#x2F;3a78bcf7ab4f4b594c0b55290afe42a50b6a295f&#x2F;src&#x2F;lib.rs#LL157C1-L167C6&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;borntyping&#x2F;rust-simple_logger&#x2F;blob&#x2F;3a78bcf7ab4f4b594c0b55290afe42a50b6a295f&#x2F;src&#x2F;lib.rs#LL157C1-L167C6&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;こうした環境変数からの読み取りを行うメソッドが提供されているため、このメソッドを初期化の際に利用すれば、 &lt;code&gt;RUST_LOG=info cargo run&lt;&#x2F;code&gt; という形式で最大のログレベルを設定することができます。 &lt;code&gt;dotenvy&lt;&#x2F;code&gt; などと組み合わせれば、アプリケーションを動作させる環境ごとに異なるログレベルを設定することも容易です。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;log&lt;&#x2F;code&gt; クレートが提供している &lt;code&gt;LevelFilter&lt;&#x2F;code&gt; は &lt;code&gt;FromStr&lt;&#x2F;code&gt; トレイトを実装しているため、環境変数から取得した文字列と事前に定義されたログレベルの文字列との比較を行うことで、対象の型への変換を行なっている。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;LOG_LEVEL_NAMES&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;OFF&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;ERROR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;WARN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;INFO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;DEBUG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;TRACE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;FromStr for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;LevelFilter &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Err &lt;&#x2F;span&gt;&lt;span&gt;= ParseLevelError;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;from_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;LevelFilter, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        ok_or(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;LOG_LEVEL_NAMES
&lt;&#x2F;span&gt;&lt;span&gt;                .iter()
&lt;&#x2F;span&gt;&lt;span&gt;                .position(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;| name.eq_ignore_ascii_case(level))
&lt;&#x2F;span&gt;&lt;span&gt;                .map(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;| LevelFilter::from_usize(p).unwrap()),
&lt;&#x2F;span&gt;&lt;span&gt;            ParseLevelError(()),
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#LL583C1-L594C2&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;log&#x2F;blob&#x2F;304eef7d30526575155efbdf1056f92c5920238c&#x2F;src&#x2F;lib.rs#LL583C1-L594C2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;なお、これらの設定を簡易的に行うための専用の関数も用意されています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;init_with_env&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), SetLoggerError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    SimpleLogger::new().env().init()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;borntyping&#x2F;rust-simple_logger&#x2F;blob&#x2F;3a78bcf7ab4f4b594c0b55290afe42a50b6a295f&#x2F;src&#x2F;lib.rs#LL542C1-L544C2&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;borntyping&#x2F;rust-simple_logger&#x2F;blob&#x2F;3a78bcf7ab4f4b594c0b55290afe42a50b6a295f&#x2F;src&#x2F;lib.rs#LL542C1-L544C2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matome&quot;&gt;まとめ&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;log&lt;&#x2F;code&gt; クレートの調査をしていく中で &lt;code&gt;Box::leak&lt;&#x2F;code&gt; を利用した &lt;code&gt;static&lt;&#x2F;code&gt; なライフタイムを有する参照の作成方法であったり、 &lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; を利用したマルチスレッド環境を考慮した状態遷移がどのように実装されているのかを把握することができました。&lt;&#x2F;p&gt;
&lt;p&gt;今までは以下のコードを見ても、マクロを実行したときにどのようにロガーを参照しているのか理解できていませんでしたが、コードリーディングを通してどのような機能を利用しているのか想像できるようになりました。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    SimpleLogger::new().init().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    log::warn!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;This is an example message.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Log&lt;&#x2F;code&gt; トレイトの実装を提供している他のクレートも同じことを行なっているはずなので、 &lt;code&gt;env_logger&lt;&#x2F;code&gt; や &lt;code&gt;fern&lt;&#x2F;code&gt; などのコードリーディングを行うときも、 &lt;code&gt;log&lt;&#x2F;code&gt; クレートが裏側でどのような処理を行なっているのか想像できる状態になっているため、そこまで苦労しなさそうです、&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Zolaで始める技術ブログ</title>
          <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://shimopino.github.io/blog/crafting-tech-blog-with-zola/</link>
          <guid>https://shimopino.github.io/blog/crafting-tech-blog-with-zola/</guid>
          <description xml:base="https://shimopino.github.io/blog/crafting-tech-blog-with-zola/">&lt;p&gt;最近 Rust で遊んでいますが、その過程で得た知識を記録していくためにブログを作成することにしました。せっかくなので、ブログには Rust 製の静的サイトジェネレーターである &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;overview&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; を使います。&lt;&#x2F;p&gt;
&lt;p&gt;Zola は Jinja2 に似た Tera テンプレートエンジンを使用しており、これから見ていくように動的なテンプレートを通じて、静的な HTML ページに高速に変換することが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;さらに、Zola は Github Pages との連携も簡単に行うことができ、Github Actions を通じて Zola のサイトをビルドし、その結果を Github Pages にデプロイすることが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;今回は Zola を使って技術ブログを構築した手順を残していこうと思います。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; zola&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; 0.17.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zola-nosetutoatupu&quot;&gt;Zola のセットアップ&lt;&#x2F;h2&gt;
&lt;p&gt;公式ドキュメントに記載されている &lt;code&gt;zola init myblog&lt;&#x2F;code&gt; コマンドを実行すれば、下記の構造のディレクトリ・ファイルが生成されます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; config.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; content
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; sass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; static
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; templates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; themes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;config.toml&lt;&#x2F;code&gt; は Zola の設定ファイルであり、こちらにブログの URL であったり各種設定を行うことが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;ディレクトリはそれぞれ以下の役割が設定されています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;content
&lt;ul&gt;
&lt;li&gt;Markdown ファイルなどでサイトを構成する記事を管理するディレクトリ&lt;&#x2F;li&gt;
&lt;li&gt;子ディレクトリを作成すればサイトの URL に反映される&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;sass
&lt;ul&gt;
&lt;li&gt;コンパイルされる Sass ファイルを配置する&lt;&#x2F;li&gt;
&lt;li&gt;Sass 以外のファイルは無視される&lt;&#x2F;li&gt;
&lt;li&gt;ディレクトリ構造は保持されるため &lt;code&gt;sass&#x2F;something&#x2F;site.scss&lt;&#x2F;code&gt; は &lt;code&gt;public&#x2F;something&#x2F;site.css&lt;&#x2F;code&gt; にコンパイルされる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;static
&lt;ul&gt;
&lt;li&gt;任意の種類のファイルを配置する&lt;&#x2F;li&gt;
&lt;li&gt;このディレクトリ内に配置した構造は、そのまま出力ディレクトリにコピーされる&lt;&#x2F;li&gt;
&lt;li&gt;静的ファイルが大きい場合を考慮して、設定ファイルに &lt;code&gt;hard_link_static = true&lt;&#x2F;code&gt; を指定すれば、コピーせずにハードリンクする&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;templates
&lt;ul&gt;
&lt;li&gt;レンダリングする時に使用する &lt;code&gt;Tera&lt;&#x2F;code&gt; のテンプレートファイルを格納する&lt;&#x2F;li&gt;
&lt;li&gt;構文に従って変数などを指定できる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;themes
&lt;ul&gt;
&lt;li&gt;テーマを利用すると、ここにテンプレートファイル一式が保存される&lt;&#x2F;li&gt;
&lt;li&gt;テーマを使用しない場合は空のままにしておく&lt;&#x2F;li&gt;
&lt;li&gt;今回は 1 から作っていくので、このディレクトリは使用しない&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;初期状態のまま &lt;code&gt;zola build&lt;&#x2F;code&gt; を実行すると、下記の外観のサイトが構築されます。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;crafting-tech-blog-with-zola&#x2F;assets&#x2F;first-site.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;directory-structure&#x2F;&quot;&gt;Overview | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;これでブログを始める準備が整いました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;github-pages-henodepuroi&quot;&gt;Github Pages へのデプロイ&lt;&#x2F;h2&gt;
&lt;p&gt;私はブログに限らず、ソフトウェアを構築する際には最終的な成果物を完成させてからデプロイするよりも、インクリメンタルに作成していくことが好みです。&lt;&#x2F;p&gt;
&lt;p&gt;まずは Web ページとして閲覧できる状態にするために、今回は Github Actions を使用して、Github Pages にデプロイすることを目指します。&lt;&#x2F;p&gt;
&lt;p&gt;Github Pages では &lt;code&gt;gh-pages, main, master&lt;&#x2F;code&gt; というブランチルートに &lt;code&gt;index.html&lt;&#x2F;code&gt; を配置してページを公開したり、リポジトリの &lt;code&gt;docs&lt;&#x2F;code&gt; ディレクトリから公開することも可能です。&lt;&#x2F;p&gt;
&lt;p&gt;Github Pages の URL は以下のパターンで決まります。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;特定の名前のリポジトリ
&lt;ul&gt;
&lt;li&gt;リポジトリ名を &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;&#x2F;code&gt; に設定する&lt;&#x2F;li&gt;
&lt;li&gt;これは例えば以下のようなサイトが該当する
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;Yelp&#x2F;yelp.github.io&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;それ以外のリポジトリ
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;username&amp;gt;.github.io&#x2F;&amp;lt;repository&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;ja&#x2F;pages&#x2F;getting-started-with-github-pages&#x2F;about-github-pages&quot;&gt;Github Pages について&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Github Actions 経由でデプロイするには以下の 3 つのステップが必要となります。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;他のリポジトリ経由で公開する場合は、そのリポジトリから自身のリポジトリにプッシュするための権限を付与するためのパーソナルアクセストークンを生成する&lt;&#x2F;li&gt;
&lt;li&gt;Github Actions を用意する&lt;&#x2F;li&gt;
&lt;li&gt;リポジトリ設定の「Github Pages」の項目を設定する&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;今回はこのリポジトリからサイトを公開するため、PAT の準備はスキップします。&lt;&#x2F;p&gt;
&lt;p&gt;Github Actions は &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;zola-deploy-action&quot;&gt;zola-deploy-action&lt;&#x2F;a&gt; にサンプルが配置されているため、こちらを参考に構築します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Zola on Github Pages
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;on:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Publish Site
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Checkout main
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;actions&#x2F;checkout@v3.0.0
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Build and Deploy
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# v0.17.2 では git config --global --add safe.directory &amp;#39;*&amp;#39; に失敗する時があった
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 最新版の参照する形式に変更
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# https:&#x2F;&#x2F;github.com&#x2F;shalzz&#x2F;zola-deploy-action&#x2F;issues&#x2F;53#issuecomment-1409707948
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;shalzz&#x2F;zola-deploy-action@master
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# https:&#x2F;&#x2F;docs.github.com&#x2F;ja&#x2F;actions&#x2F;security-guides&#x2F;automatic-token-authentication
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;GITHUB_TOKEN&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;${{ secrets.GITHUB_TOKEN }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Github Actions が実行されると、新しく &lt;code&gt;gh-pages&lt;&#x2F;code&gt; ブランチが作成され、そこに &lt;code&gt;zola build&lt;&#x2F;code&gt; によって生成された静的ファイルが配置されます。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;crafting-tech-blog-with-zola&#x2F;assets&#x2F;github-pages-visit.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;これでローカルで確認した時と、同じ内容のサイトを構築することができました。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;crafting-tech-blog-with-zola&#x2F;assets&#x2F;github-pages-first-deploy.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;deployment&#x2F;github-pages&#x2F;&quot;&gt;Github Pages | Deployment | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zui-chu-noburoguji-shi-wozuo-cheng-suru&quot;&gt;最初のブログ記事を作成する&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;besutonarutenpuretohuairuwozuo-cheng-suru&quot;&gt;ベースとなるテンプレートファイルを作成する&lt;&#x2F;h3&gt;
&lt;p&gt;公式ページの手順に従ってサンプルページを作成していけば、おおよそのテンプレートやコンテンツの挙動を理解することができます。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.app&#x2F;docs&#x2F;#base-template&quot;&gt;Overview | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;template&lt;&#x2F;code&gt; ディレクトリでは、　&lt;code&gt;Tera&lt;&#x2F;code&gt; の構文に従ったテンプレートファイルを定義することができ、ここで定義した HTML ファイルを元に様々なページを作成していきます。&lt;&#x2F;p&gt;
&lt;p&gt;以下のように &lt;code&gt;template&#x2F;base.html&lt;&#x2F;code&gt; を作成すれば、 &lt;code&gt;block&lt;&#x2F;code&gt; で定義した箇所を child として設定したテンプレートファイルで上書きすることができます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;title&amp;gt;MyBlog&amp;lt;&#x2F;title&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;section class=&amp;quot;section&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;span&gt;        (* このテンプレートを継承すれば、この部分を上書きすることができる *)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endblock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;section&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;html&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tenpuretohuairuwokuo-zhang-suru&quot;&gt;テンプレートファイルを拡張する&lt;&#x2F;h3&gt;
&lt;p&gt;child のテンプレートでは親側のテンプレートファイルを拡張し、拡張対象のテンプレートで定義されているブロック &lt;code&gt;content&lt;&#x2F;code&gt; を上書きすることが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;template&#x2F;index.html&lt;&#x2F;code&gt; を作成し、以下のように &lt;code&gt;content&lt;&#x2F;code&gt; を定義すれば親側の &lt;code&gt;content&lt;&#x2F;code&gt; を指定した要素で上書きすることができます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;base.html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;h1 class=&amp;quot;title&amp;quot;&amp;gt;This is my blog made with Zola.&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endblock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;crafting-tech-blog-with-zola&#x2F;assets&#x2F;first-home-page.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;burogusekusiyonnozuo-cheng-suru&quot;&gt;ブログセクションの作成する&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;content&lt;&#x2F;code&gt; ディレクトリには Markdown ファイルで記述した記事の内容を配置していきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; content
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; blog
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; _index.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Zola ではファイルベースのパスを構築するため、上記の構造でファイルを定義すれば、 &lt;code&gt;&amp;lt;base_url&amp;gt;&#x2F;blog&lt;&#x2F;code&gt; の URL の設定を記述することが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;例えば TOML 形式で以下の設定を記述すれば、対象 URL で使用するテンプレートファイルであったり、個別の記事で使用するテンプレートやページのタイトル、記事のソート順を指定することができます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;title = &amp;quot;List of blog posts&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;sort_by = &amp;quot;date&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;template = &amp;quot;blog.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;page_template = &amp;quot;blog-page.html&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;次にブログのトップページと個別の記事で利用するテンプレートファイルを準備します。&lt;&#x2F;p&gt;
&lt;p&gt;ここでは公式ドキュメントに従い、設定で記述した通りに &lt;code&gt;template&#x2F;blog.html&lt;&#x2F;code&gt; や &lt;code&gt;template&#x2F;blog-page.html&lt;&#x2F;code&gt; を定義してきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;base.html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;h1 class=&amp;quot;title&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ section&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;title }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;!-- section （今回では blog） に配置されているコンテンツを一覧で取得する --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;page &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pages %}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- pageオブジェクトで個別の設定を使用する --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;a href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;permalink &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;title }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endfor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endblock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;burogukontentunozuo-cheng-suru&quot;&gt;ブログコンテンツの作成する&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;_index.md&lt;&#x2F;code&gt; というファイル名は対象のディレクトリに対してセクションの設定を行うことが可能ですが、 &lt;code&gt;content&#x2F;blog&lt;&#x2F;code&gt; ディレクトリにそれ以外のファイル名で記事を作成していくことで、個別の記事のページを作成することが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;今回は最初の記事として &lt;code&gt;content&#x2F;blog&#x2F;first.md&lt;&#x2F;code&gt; ファイルを作成し、ブログセクションの設定で追加したように &lt;code&gt;title&lt;&#x2F;code&gt; と、セクションページで記事をソートするための &lt;code&gt;date&lt;&#x2F;code&gt; を設定します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;title = &amp;quot;My first post&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;date = 2019-11-27
&lt;&#x2F;span&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;This is my first blog post.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;個別の記事に対して、今までと同じように &lt;code&gt;content&lt;&#x2F;code&gt; をどのように上書きしていくのかをテンプレートファイルで記述していきます。そのときにコンテンツの内容には &lt;code&gt;page.content&lt;&#x2F;code&gt; という変数でアクセスすることが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;base.html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;h1 class=&amp;quot;title&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;title }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;p class=&amp;quot;subtitle&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;date }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;strong&amp;gt;&amp;lt;&#x2F;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;!-- ここにMarkdownファイルで記述した内容が挿入される --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe }}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endblock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここまで完了すれば、以下のようにセクションページと個別のページが作成されていることが確認できます。なお確認のために &lt;code&gt;content&#x2F;blog&#x2F;second.md&lt;&#x2F;code&gt; という追加の記事を配置しています。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;セクション: &lt;code&gt;&amp;lt;base_url&amp;gt;&#x2F;blog&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

  &lt;img 
    src=&quot;assets&#x2F;first-section.png&quot;
     alt=&quot;ブログ記事の一覧ページ&quot; 
     width=&quot;300px&quot; 
    
  &#x2F;&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;ページ: &lt;code&gt;&amp;lt;base_url&amp;gt;&#x2F;blog&#x2F;first&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

  &lt;img 
    src=&quot;assets&#x2F;first-contents.png&quot;
     alt=&quot;ブログ記事のページ&quot; 
     width=&quot;300px&quot; 
    
  &#x2F;&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;totupupezinirinkuwozhui-jia-suru&quot;&gt;トップページにリンクを追加する&lt;&#x2F;h3&gt;
&lt;p&gt;現在のトップページにはテキストが配置されているだけですが、 &lt;code&gt;get_url&lt;&#x2F;code&gt; 関数を使用すれば直接 &lt;code&gt;content&lt;&#x2F;code&gt; ディレクトリへの内部リンクを反映したリンクを取得することが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;index.html&lt;&#x2F;code&gt; に以下のようにリンクを設定すればコンテンツへのリンクを設定できます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;base.html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;h1 class=&amp;quot;title&amp;quot;&amp;gt;This is my blog made with Zola.&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; contentに配置したファイル先にリンクを設定することが可能である &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; `@` はじまりで他のディレクトリのファイルを指定できる &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span&gt;    Click &amp;lt;a href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ get_url&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;@&#x2F;blog&#x2F;_index.md&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;here&amp;lt;&#x2F;a&amp;gt; to see my
&lt;&#x2F;span&gt;&lt;span&gt;  posts.
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;p&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endblock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;github-pages-denodui-ying&quot;&gt;Github Pages での対応&lt;&#x2F;h3&gt;
&lt;p&gt;ローカル開発では記事へのリンクは、開発サーバーが &lt;code&gt;127.0.0.1&#x2F;1111&lt;&#x2F;code&gt; で起動されている場合にはこの URL が使用されますが、Github Pages で利用するためには &lt;code&gt;config.toml&lt;&#x2F;code&gt; でドメインの設定が必要になります。&lt;&#x2F;p&gt;
&lt;p&gt;現在は初期化された状態のままであり、以下のように &lt;code&gt;base_url&lt;&#x2F;code&gt; が設定されています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;base_url &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;https:&#x2F;&#x2F;example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この場合であれば各記事へのリンクは以下のようにこの URL を基準に構築されます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;example.com&#x2F;blog&#x2F;first&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;今回は Github Pages を利用するため公開先の URL を設定する必要があります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-tml &quot;&gt;&lt;code class=&quot;language-tml&quot; data-lang=&quot;tml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;base_url &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;https:&#x2F;&#x2F;shimopino.github.io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで Github Pages で動作するリンクを構築することができ、実際に Web 上で動作するブログを作成することができました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-sitage-zhong-gou-wen&quot;&gt;使用した各種構文&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{{  }}&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expressions&lt;&#x2F;code&gt; であり各種変数を指定することができる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{%  %}&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;statements&lt;&#x2F;code&gt; であり for ループであったりブロックの設定ができる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{{ page.content | safe }}&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&lt;&#x2F;code&gt; はパイプライン演算子のように、1 つ前の値を式に代入することが可能である&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;safe&lt;&#x2F;code&gt; は指定された値をエスケープ処理することで安全に取り扱うことが可能である&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;get_url&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;指定されたパスの &lt;code&gt;permalink&lt;&#x2F;code&gt; を取得する&lt;&#x2F;li&gt;
&lt;li&gt;先頭が &lt;code&gt;@&#x2F;&lt;&#x2F;code&gt; で始まる場合は &lt;code&gt;content&lt;&#x2F;code&gt; ディレクトリから始める内部リンクとして処理する&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;static&lt;&#x2F;code&gt; ファイルを指定することもでき、 &lt;code&gt;static&#x2F;css&#x2F;app.css&lt;&#x2F;code&gt; を参照したい場合は &lt;code&gt;get_url(&quot;css&#x2F;app.css&quot;)&lt;&#x2F;code&gt; と指定する&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;参考資料&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.app&#x2F;docs&#x2F;#tera-basics&quot;&gt;Basic | Tera&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.app&#x2F;docs&#x2F;#safe&quot;&gt;safe | Tera&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;templates&#x2F;overview&#x2F;#get-url&quot;&gt;get_url | Template | Zola&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;frontmatter&quot;&gt;FrontMatter&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;content&lt;&#x2F;code&gt; 以下に配置する &lt;code&gt;_index.md&lt;&#x2F;code&gt; は、対象のセクションに表示するコンテンツやメタデータの設定を行うことが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;section&#x2F;#front-matter&quot;&gt;FrontMatter | Content | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;例えば以下のような &lt;code&gt;_index.md&lt;&#x2F;code&gt; が存在していた場合、これは &lt;code&gt;&amp;lt;base_url&amp;gt;&#x2F;blog&lt;&#x2F;code&gt; 以下のセクションでのコンテンツやメタデータの設定を行うことが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; content
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; blog
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; _index.md
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; entry1.md
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; entry2.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この設定は以下のように &lt;code&gt;+++&lt;&#x2F;code&gt; で囲まれたファイルの冒頭で宣言することができ、宣言した内容はテンプレートから &lt;code&gt;section.content&lt;&#x2F;code&gt; 変数で利用できるようになります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 必要になりそうな変数のみを抽出する。全部確認したいときは公式ドキュメントを参照する。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# htmlの &amp;lt;title&amp;gt; と同じようにタイトルを設定可能
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# ここで設定した内容を &amp;lt;head&amp;gt; 要素などに設定してメタ情報を追加できる
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;title &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Blog Title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 各種CLIで `--drafts` を付与したした時にのみ読み込むかどうか
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 下書きなら true にしてビルドされないようにする
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;draft &lt;&#x2F;span&gt;&lt;span&gt;= false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# コンテンツをどのようにソートするのか指定できる
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# ブログOnlyならおおよそ投稿日時とかで良さそう
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sort_by &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 明示的にセクションでどのテンプレートを使用するのか指定できる
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# セクションごとにテンプレートを作成しておくのが良さそう
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;section.html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# セクションページも検索インデックスに含めるかどうか
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;in_search_index &lt;&#x2F;span&gt;&lt;span&gt;= true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# セクションのURLにアクセスされた場合のリダイレクト先を決定する
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 例えばセクションに直接アクセスされた時に 404 ページを表示したくない時などに使う
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;redirect_to &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;コンテンツを記述する
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;記事をソートすることもでき、以下のディレクトリ構造であった場合に、&lt;code&gt;_index.md&lt;&#x2F;code&gt; の設定に &lt;code&gt;sort_by = &quot;date&quot;&lt;&#x2F;code&gt; を設定し、各ページには &lt;code&gt;date = 2023-04-01&lt;&#x2F;code&gt; などと設定すれば、記事を日付の降順でソートした状態でテンプレートファイルから参照できます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; content
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; poc
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; _index.md
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; entry1.md
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; entry2.md
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; entry3.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;今回は &lt;code&gt;content&#x2F;poc&lt;&#x2F;code&gt; 配下のセクションに &lt;code&gt;draft = true&lt;&#x2F;code&gt; を設定し、本番のページに対してはビルドされないように検証用専用のページとして配置しています。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-shi-henotagufu-ke&quot;&gt;記事へのタグ付け&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dan-chun-nagurupingu&quot;&gt;単純なグルーピング&lt;&#x2F;h3&gt;
&lt;p&gt;Zola ではデフォルトで &lt;code&gt;Taxonomy&lt;&#x2F;code&gt; というタグ管理の仕組みがサポートされており、事前に定義した Taxonomy のカテゴリに従って、コンテンツをグルーピングすることが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;taxonomies&#x2F;&quot;&gt;Taxonomy | Content | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ビルド時に設定されたタグをもとに、全ての Taxonomy がリストアップされたページを作成し、また各 Taxonomy 名に対応するコンテンツの全てをリストアップしたページを自動的に構築することが可能です。&lt;&#x2F;p&gt;
&lt;p&gt;まずは &lt;code&gt;config.toml&lt;&#x2F;code&gt; に対して事前に Taxonomy を定義します。今回は各記事に対して単純に &lt;code&gt;tags&lt;&#x2F;code&gt; を定義し、この &lt;code&gt;tags&lt;&#x2F;code&gt; に対してそれぞれ &lt;code&gt;Rust&lt;&#x2F;code&gt; や &lt;code&gt;Terraform&lt;&#x2F;code&gt; などのグルーピングするための値を設定していきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# name = URLで使用される名称。通常は複数形
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# paginate_by = ここで指定した値を基準にページネーションを行う
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# paginate_path = ページングされた時のページ番号。例えば page&#x2F;1 のようなURlとなる
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# feed = 各タグに対して生成されるFeed（デフォルトでAtomフィードが生成される）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# lang = 多言語対応させたい時に利用する
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# render = 対象のタグをレンダリングするかどうか決定する
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;taxonomies &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;    { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;feed &lt;&#x2F;span&gt;&lt;span&gt;= true},
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;次に各ページに対して、以下のようにタグを設定していきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; content
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; poc
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; _index.md
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; entry1.md &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Rust
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; entry2.md &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Terraform
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; entry3.md &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# TypeScript
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;このためには各記事の FrontMatter に対して以下のように設定すればよく、配列なので複数のタグを付与することも可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;title = &amp;quot;Entry1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;date = 2023-01-01
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[taxonomies]
&lt;&#x2F;span&gt;&lt;span&gt;tags = [&amp;quot;Rust&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;This is date = 2023-01-01
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでコンテンツの準備はできましたが、タグの一覧やそれぞれのグループに該当するコンテンツの一覧を表示するためのテンプレートが存在していないため、ビルドすると以下のようなエラーが発生します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Error:&lt;&#x2F;span&gt;&lt;span&gt; Failed to build the site
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Error:&lt;&#x2F;span&gt;&lt;span&gt; Failed to render a list of tags page.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Error:&lt;&#x2F;span&gt;&lt;span&gt; Reason: Tried to render `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;taxonomy_list.html&lt;&#x2F;span&gt;&lt;span&gt;` but the template wasn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;t found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Zola では Taxonomy に対して設定した値に基づき、テンプレートディレクトリの以下のファイルを使用して、Taxonomy の一覧やそれぞれの値に対応するページを表示できます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$TAXONOMY_NAME&#x2F;single.html&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$TAXONOMY_NAME&#x2F;list.html&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;templates&#x2F;taxonomies&#x2F;&quot;&gt;Taxonomy | Templates | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;それぞれのページでは以下の変数を利用することが可能です（全ては載せていません）。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$TAXONOMY_NAME&#x2F;single.html
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config&lt;&#x2F;code&gt; Web サイトの設定&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;taxonomy&lt;&#x2F;code&gt; 設定した Taxonomy のデータ&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;terms&lt;&#x2F;code&gt; 設定された Taxonomy のグルーピングデータ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;$TAXONOMY_NAME&#x2F;list.html
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config&lt;&#x2F;code&gt; Web サイトの設定&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;taxonomy&lt;&#x2F;code&gt; 設定した Taxonomy のデータ&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;term&lt;&#x2F;code&gt; 描画されている Taxonomy の値&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;まずは一覧ページを &lt;code&gt;templates&#x2F;tags&#x2F;list.html&lt;&#x2F;code&gt; として作成します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;base.html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;h1&amp;gt;All Tags&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; tags配下に作成しているため、tagsのそれぞれに設定した値を取得できる &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;term &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;terms %}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; それぞれのタグに対応するページへのリンクを設定できる &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;a href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;permalink &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name }}&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pages &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;length }}&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endfor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endblock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;次に特定のタグに該当するページを &lt;code&gt;templates&#x2F;tags&#x2F;single.html&lt;&#x2F;code&gt; に作します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;base.html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;h1&amp;gt;Tag: #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name }}&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pages &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;length }}&lt;&#x2F;span&gt;&lt;span&gt;)&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;a href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;base_url &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe }}&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;tags&amp;quot;&amp;gt;Show all tags&amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;page &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pages %}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;a href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;permalink &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;title }}&lt;&#x2F;span&gt;&lt;span&gt; 投稿日: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;date &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;%Y-%m-%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endfor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endblock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで以下のようにタグの一覧ページと個別のページを作成することができました。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;base_url&amp;gt;&#x2F;tags&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

  &lt;img 
    src=&quot;assets&#x2F;first-tags-list.png&quot;
     alt=&quot;タグの一覧ページ&quot; 
     width=&quot;300px&quot; 
    
  &#x2F;&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;base_url&amp;gt;&#x2F;tags&#x2F;rust&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;

  &lt;img 
    src=&quot;assets&#x2F;first-tags-single.png&quot;
     alt=&quot;Rustのタグのページ&quot; 
     width=&quot;300px&quot; 
    
  &#x2F;&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shi-yong-sitage-zhong-gou-wen-1&quot;&gt;使用した各種構文&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{{ term.pages | length }}&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;配列、オブジェクト、文字列の要素数を返す&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{{ page.date | date(format=&quot;%Y-%m-%d&quot;) }}&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;タイムスタンプを指定したフォーマットに変換する&lt;&#x2F;li&gt;
&lt;li&gt;デフォルトでは &lt;code&gt;YYYY-MM-DD&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;タイムゾーンも設定できるが、ブログだと基本的に日付しか使わなそう&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;参考資料&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.app&#x2F;docs&#x2F;#length&quot;&gt;length | Tera&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.app&#x2F;docs&#x2F;#date&quot;&gt;date(format) | Tera&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;mu-ci-nozuo-cheng&quot;&gt;目次の作成&lt;&#x2F;h2&gt;
&lt;p&gt;ページやセクションでは &lt;code&gt;toc&lt;&#x2F;code&gt; という目次を表す変数を使用することができ、これは Markdown で記述した見出しを配列として抽出することのできる機能です。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;table-of-contents&#x2F;&quot;&gt;Table of Contents | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;例えば記事の内容を以下のように記述します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;title = &amp;quot;Table of Contentsの検証&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;date = 2023-01-10
&lt;&#x2F;span&gt;&lt;span&gt;+++
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;見出しレベル 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;## &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;見出しレベル 2-1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;見出しレベル 2-1-1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;見出しレベル 2-1-2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;見出しレベル 2-1-3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;## &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;見出しレベル 2-2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;## &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;見出しレベル 2-3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;次に各ページのテンプレートを記述している箇所に、以下のように &lt;code&gt;toc&lt;&#x2F;code&gt; の変数を通じて各種の見出しレベルを抽出します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; 目次を抽出することが可能なときのみHTMLに反映する &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;toc %}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; h1が取れているわけではなく、その記事のトップレベルの見出し要素を取得する &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;h1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;toc %}
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;a href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ h1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;permalink &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ h1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;title }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; さらに下位の階層の見出しがあればHTMLに書き出す &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;children %}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;h2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;children %}
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;lt;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;a href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ h2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;permalink &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ h2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;title }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;lt;&#x2F;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endfor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;li&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endfor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;ul&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここでは見出しレベル 2 までの要素で目次が構築されます。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;crafting-tech-blog-with-zola&#x2F;assets&#x2F;first-heading-1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;テンプレートで指定している &lt;code&gt;toc&lt;&#x2F;code&gt; は必ず見出しレベル 1 のものから抽出されるわけではなく、設定されている Markdown のコンテンツに依存します。&lt;&#x2F;p&gt;
&lt;p&gt;例えば Markdown のファイルの中から見出しレベル 1 の箇所をコメントアウトすれば、以下のように目次が生成されます。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shimopino.github.io&#x2F;blog&#x2F;crafting-tech-blog-with-zola&#x2F;assets&#x2F;first-heading-2.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;例えばページで 1 つのみ設定する &lt;code&gt;h1&lt;&#x2F;code&gt; レベルの見出しに関しては、FrontMatter の &lt;code&gt;title&lt;&#x2F;code&gt; 要素で設定を行い、Markdown 形式の記事の中身では &lt;code&gt;h2&lt;&#x2F;code&gt; レベル以下の見出ししか使用しない、といったルールを設ければスタイル調整などにも一貫性を持たせることが可能かもしれない。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sutairunoshe-ding&quot;&gt;スタイルの設定&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;sass-woli-yong-suru&quot;&gt;Sass を利用する&lt;&#x2F;h3&gt;
&lt;p&gt;スタイルの設定は &lt;code&gt;sass&lt;&#x2F;code&gt; ディレクトリに Sass ファイルを配置しておけば、CSS ファイルにコンパイルされて同じディレクトリ構造で &lt;code&gt;public&lt;&#x2F;code&gt; ディレクトリ以下に配置されます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; sass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├─ main.scss
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └─ layout
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;          ├─ header.scss
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;          └─ footer.scss
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 同じ構造で以下のようにコンパイルされる
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; main.css
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; layout
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; header.css
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; footer.css
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;テンプレート側から CSS ファイルを参照する場合には、以下の 2 つの方法があります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; ルートディレクトリを指定するパターン &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; これは Web サイトのルートディレクトリを指している &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&#x2F;main.css&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; `get_url` を指定するパターン &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt; ファイルへの URL を動的に生成する &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;#}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ get_url&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;main.css&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;trailing_slash&lt;&#x2F;span&gt;&lt;span&gt;=false) |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;後者の &lt;code&gt;get_url&lt;&#x2F;code&gt; を使用するパターンであれば、Zola の設定ファイルや生成されるファイルの位置に基づいて動作するので、基本的にはこちらを採用します。&lt;&#x2F;p&gt;
&lt;p&gt;なお &lt;code&gt;public&lt;&#x2F;code&gt; ディレクトリに全ての Sass ファイルをコンパイルしたくない場合は、アンダーバーをつけて &lt;code&gt;_header.scss&lt;&#x2F;code&gt; のようにすれば、依存関係は解決された状態でファイル自体はコンパイルされないように設定できます。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kasutamuhuontonoshe-ding&quot;&gt;カスタムフォントの設定&lt;&#x2F;h3&gt;
&lt;p&gt;カスタムフォントを設定する場合には、CDN 経由で配信されているフォントファイルをダウンロードする形式と、サーバーに保存されたフォントファイルを配信するパターンがあります。&lt;&#x2F;p&gt;
&lt;p&gt;CDN からフォントファイルを利用する際には、HTML へリンクを追加した後で、CSS でフォントファミリーを指定する必要があります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;link rel&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;preconnect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;https:&#x2F;&#x2F;fonts.googleapis.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;link rel&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;preconnect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;https:&#x2F;&#x2F;fonts.gstatic.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;crossorigin &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;link
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;css2?family=Noto+Sans+JP:wght@400;700&amp;amp;display=swap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;stylesheet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;CSS では以下のようにフォントを指定すれば対応完了です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;body &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  font-family: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Noto Sans JP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, sans-serif;
&lt;&#x2F;span&gt;&lt;span&gt;  font-weight: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;サーバーにフォントファイルを配置する場合には &lt;code&gt;static&lt;&#x2F;code&gt; ディレクトリにフォントファイルを配置して利用することが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; static
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └─ fonts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;           ├─ HackGen-Bold.ttf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;           └─ HackGen-Regular.ttf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 同じ構造で以下のようにコンパイルされる
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; fonts
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;├─&lt;&#x2F;span&gt;&lt;span&gt; HackGen-Bold.ttf
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;└─&lt;&#x2F;span&gt;&lt;span&gt; HackGen-Regular.ttf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;今回はプログラミングフォント 白源（はくげん &#x2F; HackGen）を利用します。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yuru7&#x2F;HackGen&quot;&gt;HackGen&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;これでコンパイルされることを前提に以下のように Sass ファイルから参照することが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;@font-face &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  font-family: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;HackGen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  src: url(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;fonts&#x2F;HackGen-Regular.ttf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) format(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;truetype&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  font-weight: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;@font-face &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  font-family: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;HackGen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  src: url(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;fonts&#x2F;HackGen-Bold.ttf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) format(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;truetype&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  font-weight: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;700&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;peziquan-ti-notemakarashe-ding&quot;&gt;ページ全体のテーマカラー設定&lt;&#x2F;h3&gt;
&lt;p&gt;直接的には Zola とは関係ない箇所ではありますが、サイトを構築した時の手順として記録を残しておきます。&lt;&#x2F;p&gt;
&lt;p&gt;ページ全体のテーマカラーや背景色、テキストカラーを設定する時には &lt;a href=&quot;https:&#x2F;&#x2F;colormagic.app&#x2F;&quot;&gt;ColorMagic&lt;&#x2F;a&gt; というサービスを利用することができ、指定したキーワードの雰囲気やイメージに合った配色を簡単に作成することができます。&lt;&#x2F;p&gt;
&lt;p&gt;今回は何度か配色生成を行い、このブログサイトの各種カラーを設定しています。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;peziquan-ti-noreiautoshe-ding&quot;&gt;ページ全体のレイアウト設定&lt;&#x2F;h3&gt;
&lt;p&gt;まずはヘッダーやコンテンツ、フッターを含めたページ全体のスタイル調整を行なっていきますが、可能な限りセマンティックな HTML タグを利用してクラスを利用しないスタイリングを採用します。&lt;&#x2F;p&gt;
&lt;p&gt;このクラスレスなスタイリングの方法は &lt;a href=&quot;https:&#x2F;&#x2F;picocss.com&#x2F;&quot;&gt;PicoCSS&lt;&#x2F;a&gt; を参考にしています。&lt;&#x2F;p&gt;
&lt;p&gt;そのために &lt;code&gt;templates&#x2F;base.html&lt;&#x2F;code&gt; のトップレベルのセクションの対して余白調整を行うためのスタイルを設定します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;header&amp;gt;&amp;lt;&#x2F;header&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;main&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %} {% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endblock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;main&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;footer&amp;gt;&amp;lt;&#x2F;footer&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;今回はブログの横幅などの全体的なスタイルを以下のように設定します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;.container &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  height: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;100%&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  max-width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;50rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;auto;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで左右の余白調整ができた状態となったため、あとはヘッダーやフッターを設定していきます。&lt;&#x2F;p&gt;
&lt;p&gt;将来的にはマクロなどを活用してヘッダーなどの HTML 要素のみを外だしすることも考慮しますが、現時点では複雑な構造を導入せずに直接 &lt;code&gt;templates&#x2F;base.html&lt;&#x2F;code&gt; を編集していきます。&lt;&#x2F;p&gt;
&lt;p&gt;ヘッダーに対しては以下のようにナビゲーションなどの HTML 構造を定義します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span&gt;&amp;lt;header&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;div class=&amp;quot;logo&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;a href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;base_url }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Blog&amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;span class=&amp;quot;cursor&amp;quot;&amp;gt;&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;nav&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;a href=&amp;quot;&#x2F;blog&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noreferrer noopener&amp;quot;&amp;gt;Posts&amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;a href=&amp;quot;&#x2F;tags&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noreferrer noopener&amp;quot;&amp;gt;Tags&amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;a href=&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;shimopino&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noreferrer noopener&amp;quot;&amp;gt;Github&amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;nav&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;header&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;あとはヘッダー自体のレイアウト構造に対して以下のように、ナビゲーションも含めて横並びに設定しておき、後は個別にスタイリングをすれば完了です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;header &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  display: flex;
&lt;&#x2F;span&gt;&lt;span&gt;  justify-content: space-between;
&lt;&#x2F;span&gt;&lt;span&gt;  align-items: center;
&lt;&#x2F;span&gt;&lt;span&gt;  flex-wrap: wrap;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;フッターには以下のようにシンプルにコピーライトと Zola へのリンクのみを設定します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span&gt;&amp;lt;footer&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;span&amp;gt;© 2023 shimopino. All rights reserved.&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ::
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;span&amp;gt;Made by &amp;lt;a href=&amp;quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&amp;quot;&amp;gt;Zola&amp;lt;&#x2F;a&amp;gt;&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;footer&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;feed-noshe-ding&quot;&gt;Feed の設定&lt;&#x2F;h2&gt;
&lt;p&gt;Zola ではデフォルトで Feed の機能をサポートしており、 &lt;code&gt;config.toml&lt;&#x2F;code&gt; ファイルに &lt;code&gt;generate_feed = true&lt;&#x2F;code&gt; を設定すれば、サイトの Feed ファイルを作成することができます。&lt;&#x2F;p&gt;
&lt;p&gt;このときに設定で &lt;code&gt;feed_filename&lt;&#x2F;code&gt; を設定していればその名前でファイルが生成されますが、指定されていない場合はデフォルトの &lt;code&gt;atom.xml&lt;&#x2F;code&gt; が生成されます。&lt;&#x2F;p&gt;
&lt;p&gt;ファイル名には &lt;code&gt;atom.xml&lt;&#x2F;code&gt; を指定すれば組み込みの Atom テンプレートで Atom 1.0 形式で生成され、 &lt;code&gt;rss.xml&lt;&#x2F;code&gt; を指定すれば組み込みのテンプレートを使用して RSS 2.0 形式で生成され、それ以外のファイル名では自身でテンプレートを用意する必要があります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;generate_feed &lt;&#x2F;span&gt;&lt;span&gt;= true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;feed_filename &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;rss.xml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;templates&#x2F;base.html&lt;&#x2F;code&gt; ファイルに以下のコードを指定して、記事の自動検出を有効にし、フィードリーダーやブラウザが Web サイトで利用可能な RSS や Atom フィードについて通知できるようにします。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{%- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;generate_feed %}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;link rel=&amp;quot;alternate&amp;quot; type=&amp;quot;application&#x2F;rss+xml&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;title=&amp;quot;RSS&amp;quot; href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ get_url&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;rss.xml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;-%}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;画面でリンクを表示させたい場合には、以下のようにリンクを追加するだけで対応できます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;a href&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;{{ get_url(path=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rss.xml&amp;quot;) | safe }}&amp;quot; target&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;_blank&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;noreferrer noopener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Feed&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;templates&#x2F;feeds&#x2F;&quot;&gt;Feed | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;404-pezi&quot;&gt;404 ページ&lt;&#x2F;h2&gt;
&lt;p&gt;どの URL にも該当しない場合に表示する 404 ページは単純に &lt;code&gt;templates&#x2F;404.html&lt;&#x2F;code&gt; を用意すれば、このテンプレートファイルを利用して描画されます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;base.html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;h1&amp;gt;404 Not Found&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endblock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;content %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;templates&#x2F;404&#x2F;&quot;&gt;404 error page | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;macros-woli-yong-sitazhong-fu-noxue-chu&quot;&gt;Macros を利用した重複の削除&lt;&#x2F;h2&gt;
&lt;p&gt;Zola では Tera のマクロ機能を利用して、重複するコードを関数化させることができます。&lt;&#x2F;p&gt;
&lt;p&gt;例えば以下のように &lt;code&gt;templates&#x2F;macros&#x2F;sample.html&lt;&#x2F;code&gt; に対して入力された値をベースに &lt;code&gt;input&lt;&#x2F;code&gt; 要素を作成する関数を作成します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;macro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;label&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ label }}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;input type=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ type }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;label&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;input %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;このマクロを利用するには対象のテンプレートファイルから以下のようにインポートし、別名を付与します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{% import &amp;quot;macros&#x2F;sample.html&amp;quot; as sample_macro %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;あとは付与した別名を元に対象のマクロを呼び出せば処理を実行することができます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{{ sample_macros::input(label=&amp;quot;Name&amp;quot;, type=&amp;quot;text&amp;quot;) }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.app&#x2F;docs#macros&quot;&gt;macros | Tera&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;今回は個別のページや記事一覧ページで利用しているタグつけの部分をマクロ化させていくため、以下のように専用のマクロを用意します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;macro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;taxonomies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;taxonomies&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tags %}
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;span&amp;gt;::&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;taxonomies&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tags %}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tag_url &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;get_taxonomy_url&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;) | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe %}
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;a href=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ tag_url }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ tag }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;a&amp;gt;&amp;amp;nbsp;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endfor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tags %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;あとはこのマクロを &lt;code&gt;base.html&lt;&#x2F;code&gt; で読み込んでおきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{% import &amp;quot;macros&#x2F;tags.html&amp;quot; as tags_macro %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;そして &lt;code&gt;blog.html&lt;&#x2F;code&gt; や &lt;code&gt;blog-page.html&lt;&#x2F;code&gt; でタグを定義している箇所で、このマクロを呼び出せばタグ部分の HTML 箇所を 1 箇所に集約することができます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{{ tags_macro::tags(page=page) }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;他にも記事の目次などは、マクロ化させておくと記事の構造を変更する時に変更箇所がはっきりと理解できるようになります（あまりにも乱用すると処理が分散してしまっていることによる可読性の悪化がひどくなるので注意が必要です）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shortcodes-woli-yong-suru&quot;&gt;Shortcodes を利用する&lt;&#x2F;h2&gt;
&lt;p&gt;Markdown で記述した記事の中に画像への参照が含まれている場合、以下のようにパスや alt テキストを指定するだけで、画像のサイズを設定することができません。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span&gt;![caption](.&#x2F;path&#x2F;to&#x2F;image.png)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;こうした場合に Shortcodes の機能を利用すれば、Markdown ファイルから事前に定義された HTML 要素を呼び出すことで、追加の属性などを設定することができます。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;shortcodes&#x2F;&quot;&gt;Shortcodes | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;まずは &lt;code&gt;templates&#x2F;shortcodes&#x2F;image.html&lt;&#x2F;code&gt; を作成し、以下のようにテンプレートを作成します。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;jinja2&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-jinja2 &quot;&gt;&lt;code class=&quot;language-jinja2&quot; data-lang=&quot;jinja2&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;src %}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;img
&lt;&#x2F;span&gt;&lt;span&gt;    src=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ src &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;safe }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;alt %}&lt;&#x2F;span&gt;&lt;span&gt; alt=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ alt }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;width %}&lt;&#x2F;span&gt;&lt;span&gt; width=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{{ width }}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;center %}
&lt;&#x2F;span&gt;&lt;span&gt;      style=&amp;quot;display: block; margin: 0 auto;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;{% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;%}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;あとは Markdown 側でこのファイルを指定して、所定の引数を指定すれば簡易的にスタイルを調整した HTML 要素を記述することが可能です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;img 
&lt;&#x2F;span&gt;&lt;span&gt;    src=&amp;quot;assets&#x2F;first-section.png&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;     alt=&amp;quot;sample&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;     width=&amp;quot;300px&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで Markdown 側からも柔軟に HTML 要素を指定することが可能であることがわかりました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;googlejian-suo-debiao-shi-saseru&quot;&gt;Google検索で表示させる&lt;&#x2F;h2&gt;
&lt;p&gt;Google検索で今回作成したGithub PagesのURLを指定して検索を行なっても、検索結果に表示されない状態となっています。&lt;&#x2F;p&gt;
&lt;p&gt;そのため参考サイトをもとに以下の3つの対策を実施します。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Google Search Consoleへの登録&lt;&#x2F;li&gt;
&lt;li&gt;サイトマップへの登録&lt;&#x2F;li&gt;
&lt;li&gt;Googleアナリティクスへの登録&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.bedroomcomputing.com&#x2F;2020&#x2F;04&#x2F;2020-0408-googleconsole&#x2F;&quot;&gt;GitHub Pagesで作ったブログをGoogle検索にヒットさせる&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;google-search-consolehenodeng-lu&quot;&gt;Google Search Consoleへの登録&lt;&#x2F;h3&gt;
&lt;p&gt;URLプレフィックスに対して自身のサイト（ &lt;code&gt;https:&#x2F;&#x2F;shimopino.github.io&lt;&#x2F;code&gt; ）を指定すれば、確認方法としてトップレベルのパスに検証用のHTMLファイルを配置するように促されます。&lt;&#x2F;p&gt;
&lt;p&gt;そこで今回は &lt;code&gt;static&lt;&#x2F;code&gt; ディレクトリ直下に指定されたファイルを配置します。&lt;&#x2F;p&gt;
&lt;p&gt;これで再度Google Search Consoleで所有権の確認を行えば、確認が成功しプロパティ設定の画面に遷移できます。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;saitomatupunodeng-lu&quot;&gt;サイトマップの登録&lt;&#x2F;h3&gt;
&lt;p&gt;Zolaで組み込みでサイトマップを生成することでき、 &lt;code&gt;&amp;lt;base_url&amp;gt;&#x2F;sitemap.xml&lt;&#x2F;code&gt; にアクセスすれば、自動的に構築されたサイトマップを確認することができます。&lt;&#x2F;p&gt;
&lt;p&gt;こちらをプロパティ設定画面の「サイトマップ」から上記のURLを登録すれば、送信されたサイトマップに対してスタータスが成功状態となっており登録が完了したことがわかります。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;google-analyticshenodeng-lu&quot;&gt;Google Analyticsへの登録&lt;&#x2F;h3&gt;
&lt;p&gt;Google Analyticsへアカウント登録やプロパティの登録を行えば、Googleタグをインストールする手段が提供されます。その際に手動でインストールを選択して表示されるスクリプトを &lt;code&gt;base.html&lt;&#x2F;code&gt; に配置すれば登録することができます。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gan-xiang&quot;&gt;感想&lt;&#x2F;h2&gt;
&lt;p&gt;触ってみた感じ Zola は薄いライブラリであり、HTML と CSS、ある程度のテンプレート構文を理解できていればそこまでつまづくことなくブログサイトを構築することができました。&lt;&#x2F;p&gt;
&lt;p&gt;マクロや Shortcodes などの乱用すれば運用が難しくなってしまいそうな機能もありますが、必要最小限の利用の留めれば今後も問題なくブログを運用できそうです。&lt;&#x2F;p&gt;
&lt;p&gt;Zola には各種テーマが事前に用意されており、ソースコードも一緒に公開されているので、他のテーマの実装を見ながら挙動確認を進めていくことができたので、こうしたサンプルが豊富に公開されているライブラリは導入が楽で助かりますね。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;&quot;&gt;Theme | Zola&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
